<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[youfei's blog]]></title>
  <subtitle><![CDATA[Good good study]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://youfei.github.io/"/>
  <updated>2014-03-04T07:24:17.805Z</updated>
  <id>http://youfei.github.io/</id>
  
  <author>
    <name><![CDATA[fei you]]></name>
    <email><![CDATA[youfei08@126.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[MongoDB初读]]></title>
    <link href="http://youfei.github.io/2014/03/03/mongo-g-1/"/>
    <id>http://youfei.github.io/2014/03/03/mongo-g-1/</id>
    <published>2014-03-03T08:22:09.000Z</published>
    <updated>2014-03-04T07:23:59.000Z</updated>
    <content type="html"><![CDATA[<p>MongoDB初读</p>
<a id="more"></a>

<h1 id="mongodb-">MongoDB安装</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="number">1</span> Download mongodb-linux-i686-<span class="number">2.4</span><span class="number">.9</span>.tgz
<span class="number">2</span> tar xvf mongodb-linux-i686-<span class="number">2.4</span><span class="number">.9</span>.tgz
<span class="number">3</span> mkdir -p /data/db/	//默认会在/data/db/存储数据库文件
<span class="number">4</span> chown `id -u` /data/db
**<span class="number">5</span> chown -R  mongodb:mongodb db/** 这个可重要了
<span class="number">6</span> ./mongod

OR

<span class="number">1</span> sudo apt-get install mongodb-10gen
Installing new version of config file /etc/mongodb.conf <span class="keyword">...</span>
Installing new version of config file /etc/init/mongodb.conf <span class="keyword">...</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>$mongod
./mongod --help <span class="keyword">for</span> help <span class="keyword">and</span> startup options
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">50.735</span>
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">50.738</span> warning: <span class="number">32</span>-bit servers don't have journaling enabled by <span class="keyword">default</span>. Please <span class="keyword">use</span> --journal <span class="keyword">if</span> you want durability.
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">50.739</span>
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.037</span> [initandlisten] MongoDB starting : pid=<span class="number">19039</span> port=<span class="number">27017</span> dbpath=/data/db/ <span class="number">32</span>-bit host=ubuntu
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.039</span> [initandlisten]
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.040</span> [initandlisten] ** NOTE: This is a <span class="number">32</span> bit MongoDB binary.
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.041</span> [initandlisten] **       <span class="number">32</span> bit builds are limited <span class="keyword">to</span> less than <span class="number">2</span>GB <span class="keyword">of</span> data (<span class="keyword">or</span> less <span class="keyword">with</span> --journal).
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.042</span> [initandlisten] **       Note that journaling defaults <span class="keyword">to</span> off <span class="keyword">for</span> <span class="number">32</span> bit <span class="keyword">and</span> is currently off.
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.042</span> [initandlisten] **       See http:<span class="comment">//dochub.mongodb.org/core/32bit</span>
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.044</span> [initandlisten]
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.047</span> [initandlisten] db version v2<span class="number">.4</span><span class="number">.9</span>
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.047</span> [initandlisten] git version: <span class="number">52</span>fe0d21959e32a5bdbecdc62057db386e4e029c
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.047</span> [initandlisten] build info: Linux bs-linux32<span class="number">.10</span>gen.cc <span class="number">2.6</span><span class="number">.21</span><span class="number">.7</span>-<span class="number">2.</span>fc8xen #<span class="number">1</span> SMP Fri Feb <span class="number">15</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">36</span> EST <span class="number">2008</span> i686 BOOST_LIB_VERSION=<span class="number">1</span>_49
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.048</span> [initandlisten] allocator: system
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.048</span> [initandlisten] options: {}
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.271</span> [FileAllocator] allocating <span class="keyword">new</span> datafile /data/db/local.ns, filling <span class="keyword">with</span> zeroes...
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.273</span> [FileAllocator] creating directory /data/db/_tmp
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.355</span> [FileAllocator] <span class="keyword">done</span> allocating datafile /data/db/local.ns, size: <span class="number">16</span>MB,  took <span class="number">0.045</span> secs
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.357</span> [FileAllocator] allocating <span class="keyword">new</span> datafile /data/db/local<span class="number">.0</span>, filling <span class="keyword">with</span> zeroes...
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.432</span> [FileAllocator] <span class="keyword">done</span> allocating datafile /data/db/local<span class="number">.0</span>, size: <span class="number">16</span>MB,  took <span class="number">0.002</span> secs
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.510</span> [initandlisten] command local.$cmd command: { create: <span class="string">"startup_log"</span>, size: <span class="number">10485760</span>, capped: <span class="keyword">true</span> } ntoreturn:<span class="number">1</span> keyUpdates:<span class="number">0</span>  reslen:<span class="number">37</span> <span class="number">239</span>ms
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.520</span> [websvr] admin web console waiting <span class="keyword">for</span> connections on port <span class="number">28017</span>
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">27</span>:<span class="number">51.522</span> [initandlisten] waiting <span class="keyword">for</span> connections on port <span class="number">27017</span>
</pre></td></tr></table></figure>

<p>另起console</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre>$mongo
MongoDB <span class="built_in">shell</span> <span class="built_in">version</span>: <span class="number">2.4</span><span class="number">.9</span>
connecting <span class="built_in">to</span>: test
Welcome <span class="built_in">to</span> <span class="operator">the</span> MongoDB <span class="built_in">shell</span>.
For interactive help, type <span class="string">"help"</span>.
For more comprehensive documentation, see
        <span class="keyword">http</span>://docs.mongodb.org/
Questions? Try <span class="operator">the</span> support group
        <span class="keyword">http</span>://groups.google.com/group/mongodb-user
Server has startup warnings:
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">39</span>:<span class="number">22.629</span> [initandlisten]
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">39</span>:<span class="number">22.631</span> [initandlisten] ** NOTE: This is <span class="operator">a</span> <span class="number">32</span> bit MongoDB binary.
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">39</span>:<span class="number">22.631</span> [initandlisten] **       <span class="number">32</span> bit builds are limited <span class="built_in">to</span> less than <span class="number">2</span>GB <span class="operator">of</span> data (<span class="operator">or</span> less <span class="operator">with</span> <span class="comment">--journal).</span>
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">39</span>:<span class="number">22.632</span> [initandlisten] **       See <span class="keyword">http</span>://dochub.mongodb.org/core/<span class="number">32</span>bit
Mon Mar  <span class="number">3</span> <span class="number">16</span>:<span class="number">39</span>:<span class="number">22.633</span> [initandlisten]
&gt;
</pre></td></tr></table></figure>

<hr>
<h1 id="-">设置开机启动</h1>
<p><strong>以下这个是要自己写，要是应用apt-get install 的话是不需要的。</strong></p>
<p>/etc/init.d/mongodb</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="code"><pre><span class="shebang">#!/bin/sh
 </span>
<span class="comment">### BEGIN INIT INFO</span>
<span class="comment"># Provides:     mongodb</span>
<span class="comment"># Required-Start:</span>
<span class="comment"># Required-Stop:</span>
<span class="comment"># Default-Start:        2 3 4 5</span>
<span class="comment"># Default-Stop:         0 1 6</span>
<span class="comment"># Short-Description: mongodb</span>
<span class="comment"># Description: mongo db server</span>
<span class="comment">### END INIT INFO</span>
 
. /lib/lsb/init-functions
 
PROGRAM=/tools/mongodb-linux-i686-<span class="number">2.4</span>.<span class="number">9</span>/bin/mongod
MONGOPID=`ps -ef | grep <span class="string">'mongod'</span> | grep -v grep | awk <span class="string">'{print $2}'</span>`
 
test -x <span class="variable">$PROGRAM</span> || <span class="keyword">exit</span> <span class="number">0</span>
 
<span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span>
  start)
     ulimit -n <span class="number">3000</span>
     log_begin_msg <span class="string">"Starting MongoDB server"</span> 
     <span class="variable">$PROGRAM</span> --fork --quiet -journal -maxConns=<span class="number">2400</span> -rest --logpath /data/db/journal/mongdb.log
     log_end_msg <span class="number">0</span>
     ;;
  stop)
     log_begin_msg <span class="string">"Stopping MongoDB server"</span> 
     <span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$MONGOPID</span>"</span> ]; <span class="keyword">then</span> 
        kill -<span class="number">15</span> <span class="variable">$MONGOPID</span>
     <span class="keyword">fi</span>
     log_end_msg <span class="number">0</span>
     ;;
  status)
     ;;
  *)
     log_success_msg <span class="string">"Usage: /etc/init.d/mongodb {start|stop|status}"</span> 
     <span class="keyword">exit</span> <span class="number">1</span>
<span class="keyword">esac</span>
 
<span class="keyword">exit</span> <span class="number">0</span>
</pre></td></tr></table></figure>

<p><strong>关闭/启动服务</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>sudo service mongodb stop
sudo service mongodb <span class="operator"><span class="keyword">start</span>

<span class="string">`http://192.168.6.129:27017/`</span>
You <span class="keyword">are</span> trying <span class="keyword">to</span> access MongoDB <span class="keyword">on</span> the native driver port. <span class="keyword">For</span> http diagnostic access, <span class="keyword">add</span> <span class="number">1000</span> <span class="keyword">to</span> the port <span class="keyword">number</span></span>
</pre></td></tr></table></figure>

<p>手动粗暴启动mongodb server</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="built_in">.</span>/mongod <span class="attribute">-journal</span> <span class="attribute">-maxConns</span><span class="subst">=</span><span class="number">2400</span> <span class="attribute">-rest</span>
<span class="attribute">-journal</span> 代表要写日志，<span class="attribute">-maxConns</span><span class="subst">=</span><span class="number">2400</span>代表mongodb 可以接受<span class="number">2400</span>个tcp连接，<span class="attribute">-rest</span>代表可以允许客户端通过rest API访问mongdb server<span class="built_in">.</span>
还可以使用参数—quiet启动可以指定安静模式减少记录的项目数，注意使用该参数必须要同时指定日志路径,比如：
—quiet —logpath /<span class="built_in">data</span>/db/journal/mongdb<span class="built_in">.</span><span class="keyword">log</span>
</pre></td></tr></table></figure>

<p><strong>修改系统允许的最大连接数</strong></br></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre>上面的最大连接数目的限制原因是Linux系统默认一个进程最大文件打开数目为<span class="number">1024</span>，用ulimit -<span class="operator">a</span> 命令检查，可以看到下面这行:
<span class="built_in">open</span> <span class="built_in">files</span>                      (-n) <span class="number">1024</span>

修改/etc/security/limits.conf 配置文件。
使用命令：sudo gedit /etc/security/limits.conf
在文件中增加
* soft nofile <span class="number">3000</span>
* hard nofile <span class="number">20000</span>
root soft nofile <span class="number">3000</span>
root hard nofile <span class="number">20000</span>
* 表示该配置对所有用户均有效,root用户要特别加两行。
硬限制通常是根据系统硬件资源状况(主要是系统内存)计算出来的系统最多可同时打开的文件数量，软限制是在这个基础上进一步的限制。因此软限制数目要低于硬限制。
nofile表示 <span class="built_in">max</span> <span class="built_in">number</span> <span class="operator">of</span> <span class="built_in">open</span> <span class="built_in">files</span>
重新启动计算机，然后再用ulimit -<span class="operator">a</span> 命令查看：
<span class="built_in">open</span> <span class="built_in">files</span>                      (-n) <span class="number">3000</span>
已经生效了。现在再启动mongodb server，问题解决
</pre></td></tr></table></figure>

<hr>
<h1 id="-">客户端登录服务器</h1>
<p>启动日志如上，服务端启动如上，现在我们在另外一个终端测试服务器是否正常。</br>
进入/usr/local/mongodb-linux-x86_64-2.0.2/bin,执行./mongo</br>
出现</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>MongoDB <span class="built_in">shell</span> <span class="built_in">version</span>: <span class="number">2.0</span><span class="number">.2</span>
connecting <span class="built_in">to</span>: test
</pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>$db<span class="preprocessor">.foo</span><span class="preprocessor">.save</span>({<span class="number">1</span> : “Hello world”})
$db<span class="preprocessor">.foo</span><span class="preprocessor">.find</span>()<span class="comment">;</span>
{ <span class="string">"_id"</span> : ObjectId(<span class="string">"4e4b395986738efa2d0718b9"</span>), <span class="string">"1"</span> : <span class="string">"hello world"</span> }
</pre></td></tr></table></figure>

<p>执行到这里恭喜你，成功安装好了mongodb</br></p>
<p>也可以通过下面这种方式连接远程的mongodb server,默认端口为27017,比如
./mongo 192.168.6.129</p>
<hr>
<h1 id="-">创建数据库</h1>
<p>如果没有mydb数据库的话，在客户端中使用命令：</br>
use mydb</br>
将创建mydb数据库，而且当前数据库切换为mydb.</br>
此时show dbs不显示该数据库名称。使用db.stats()命令检查当前数据库状态。</br></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$db</span>     当前数据库
</pre></td></tr></table></figure>

<hr>
<h1 id="-">标准检查流程</h1>
<ul>
<li>1.首先检查 ulimit -a
查看open files (-n) 是否为设置的值</li>
<li>2.ps -def | grep mongod
查看该服务是否启动</li>
<li>3.cd /var/log/
cat mongdb.log</br>
查看服务器是否正确</li>
<li>4.进入<a href="http://192.168.6.129:28017" target="_blank">http://192.168.6.129:28017</a>
看服务器是否启动正常</li>
</ul>
<hr>
<h1 id="mongovue">MONGOVUE</h1>
<p><a href="http://www.mongovue.com/" target="_blank">MongoVUE</a> is an innovative MongoDB desktop application for Windows OS that gives you an elegant and highly usable GUI interface to work with MongoDB. Now there is one less worry in managing your web-scale data.</p>
<p><strong>Connection Congfig</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="attribute">Server</span>: <span class="string">192.168.6.129</span>
<span class="attribute">Prot</span>: <span class="string">  27017</span>
</pre></td></tr></table></figure>

<hr>
<h1 id="-">参考</h1>
<p><a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/" target="_blank">Install MongoDB on Ubuntu</a>
<a href="http://blog.csdn.net/fdipzone/article/details/7316240" target="_blank">Ubuntu安装MongoDB</a>
<a href="http://www.cnblogs.com/xuqiang/archive/2011/03/27/1997158.html" target="_blank">初试MongoDB</a></p>
]]></content>
    <summary type="html"><![CDATA[<p>MongoDB初读</p>
]]></summary>
    
      <category term="Mongo" scheme="http://youfei.github.io/tags/Mongo/"/>
    
      <category term="Mongo" scheme="http://youfei.github.io/categories/Mongo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈CSRF攻击方式(转)]]></title>
    <link href="http://youfei.github.io/2014/03/03/others-2/"/>
    <id>http://youfei.github.io/2014/03/03/others-2/</id>
    <published>2014-03-03T07:54:19.000Z</published>
    <updated>2014-03-03T08:10:15.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank">浅谈CSRF攻击方式</a>出处：hyddd(<a href="http://www.cnblogs.com/hyddd/" target="_blank">http://www.cnblogs.com/hyddd/</a>) 写的太详细了</br></p>
<p>以服务器端产生伪随机数<input type="hidden">防范，该方法也可用于<strong>防止表单多次提交</strong>~</p>
<a id="more"></a>

<h1 id="-csrf-">一.CSRF是什么？</h1>
<p>　　CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p>
<hr>
<h1 id="-csrf-">二.CSRF可以做什么？</h1>
<p>　　你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账......造成的问题包括：个人隐私泄露以及财产安全。</p>
<hr>
<h1 id="-csrf-">三.CSRF漏洞现状</h1>
<p>　　CSRF这种攻击方式在2000年已经被国外的安全人员提出，但在国内，直到06年才开始被关注，08年，国内外的多个大型社区和交互网站分别爆出CSRF漏洞，如：NYTimes.com（纽约时报）、Metafilter（一个大型的BLOG网站），YouTube和百度HI......而现在，互联网上的许多站点仍对此毫无防备，以至于安全业界称CSRF为“沉睡的巨人”。</p>
<hr>
<h1 id="-csrf-">四.CSRF的原理</h1>
<p>　　下图简单阐述了CSRF攻击的思想：
<img src="http://pic002.cnblogs.com/img/hyddd/200904/2009040916453171.jpg" alt="CSRF攻击的思想"></p>
<p>从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p>
<p>　　1.登录受信任网站A，并在本地生成Cookie。</p>
<p>　　2.在不登出A的情况下，访问危险网站B。</p>
<p>　　看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：</p>
<p>　　1.你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。</p>
<p>　　2.你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了......）</p>
<p>　　3.上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。</p>
<blockquote><p>其实可以看出，CSRF攻击是源于WEB的隐式身份验证机制！WEB的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！</p>
</blockquote>


<hr>
<h1 id="-csrf-">五.CSRF的防御</h1>
<h2 id="1-csrf-">1.服务端进行CSRF防御</h2>
<p>服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。</p>
<p>　  (1).Cookie Hashing(所有表单都包含同一个伪随机值)：</p>
<p>　　这可能是最简单的解决方案了，因为攻击者不能获得第三方的Cookie(理论上)，所以表单中的数据也就构造失败了:&gt;</p>
<p><strong>这个方法个人觉得已经可以杜绝99%的CSRF攻击了，那还有1%呢....由于用户的Cookie很容易由于网站的XSS漏洞而被盗取，这就另外的1%。一般的攻击者看到有需要算Hash值，基本都会放弃了，某些除外，所以如果需要100%的杜绝，这个不是最好的方法。</strong></p>
<p>   (2).验证码</p>
<p>　　这个方案的思路是：每次的用户提交都需要用户在表单中填写一个图片上的随机字符串，厄....这个方案可以完全解决CSRF，但个人觉得在易用性方面似乎不是太好，还有听闻是验证码图片的使用涉及了一个被称为MHTML的Bug，可能在某些版本的微软IE中受影响。</p>
<p>　 (3).One-Time Tokens(不同的表单包含一个不同的伪随机值)</p>
<p>　　在实现One-Time Tokens时，需要注意一点：就是“并行会话的兼容”。如果用户在一个站点上同时打开了两个不同的表单，CSRF保护措施不应该影响到他对任何表单的提交。考虑一下如果每次表单被装入时站点生成一个伪随机值来覆盖以前的伪随机值将会发生什么情况：用户只能成功地提交他最后打开的表单，因为所有其他的表单都含有非法的伪随机值。必须小心操作以确保CSRF保护措施不会影响选项卡式的浏览或者利用多个浏览器窗口浏览一个站点。</p>
]]></content>
    <summary type="html"><![CDATA[<p><a href="http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank">浅谈CSRF攻击方式</a>出处：hyddd(<a href="http://www.cnblogs.com/hyddd/" target="_blank">http://www.cnblogs.com/hyddd/</a>) 写的太详细了</br></p>
<p>以服务器端产生伪随机数<input type="hidden">防范，该方法也可用于<strong>防止表单多次提交</strong>~</p>
]]></summary>
    
      <category term="比较杂乱" scheme="http://youfei.github.io/tags/%E6%AF%94%E8%BE%83%E6%9D%82%E4%B9%B1/"/>
    
      <category term="比较杂乱" scheme="http://youfei.github.io/categories/%E6%AF%94%E8%BE%83%E6%9D%82%E4%B9%B1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RabbitMQ 初读]]></title>
    <link href="http://youfei.github.io/2014/02/28/rabbit-g-1/"/>
    <id>http://youfei.github.io/2014/02/28/rabbit-g-1/</id>
    <published>2014-02-28T06:14:37.000Z</published>
    <updated>2014-03-03T06:40:54.000Z</updated>
    <content type="html"><![CDATA[<p>RabbitMQ 是由 LShift 提供的一个 Advanced Message Queuing Protocol (AMQP) 的开源实现，由以高性能、健壮以及可伸缩性出名的 Erlang 写成，因此也是继承了这些优点。</p>
<a id="more"></a>

<h1 id="-">简介</h1>
<p>典型的消费-生产者模型。 应用：对无需即时返回且耗时的操作，进行异步处理。</p>
<p>RabbitMQ的结构图如下：
<img src="http://www.nsbeta.info/wp-content/uploads/2012/03/mq.png" alt="RabbitMQ的结构图"></p>
<h2 id="-"><strong>几个概念说明</strong></h2>
<p><strong>Broker：</strong>简单来说就是消息队列服务器实体。</br>
<strong>Exchange：</strong>消息交换机，它指定消息按什么规则，路由到哪个队列。</br>
<strong>Queue：</strong>消息队列载体，每个消息都会被投入到一个或多个队列。</br>
<strong>Binding：</strong>绑定，它的作用就是把exchange和queue按照路由规则绑定起来。</br>
<strong>Routing Key：</strong>路由关键字，exchange根据这个关键字进行消息投递。</br>
<strong>vhost：</strong>虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。</br>
<strong>producer：</strong>消息生产者，就是投递消息的程序。</br>
<strong>consumer：</strong>消息消费者，就是接受消息的程序。</br>
<strong>channel：</strong>消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。</br></p>
<h2 id="-erlang-"><strong>安装erlang</strong></h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$sudo</span> apt<span class="attribute">-get</span> install erlang<span class="attribute">-nox</span>
</pre></td></tr></table></figure>

<h2 id="-rabbitmq-"><strong>安装RabbitMQ</strong></h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$sudo</span> dpkg <span class="attribute">-i</span> rabbitmq<span class="attribute">-server_3</span><span class="number">.2</span><span class="number">.3</span><span class="subst">-</span><span class="number">1</span>_all<span class="built_in">.</span>deb
</pre></td></tr></table></figure>

<h3 id="-rabbitmq-server-"><strong>启动/停止rabbitmq-server</strong>要用全路径</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>/etc/init.d/rabbitmq-<span class="built_in">server</span> start
 * Starting message broker rabbitmq-<span class="built_in">server</span>                                                                                                 [ OK ]
/etc/init.d/rabbitmq-<span class="built_in">server</span> <span class="keyword">stop</span>
 * Stopping message broker rabbitmq-<span class="built_in">server</span>                                                                                                 [ OK ]
/etc/init.d/rabbitmq-<span class="built_in">server</span> restart
 * Restarting message broker rabbitmq-<span class="built_in">server</span>                                                                                               [ OK ]
</pre></td></tr></table></figure>

<h3 id="-path-etc-rabbitmq-"><strong>配置文件</strong> Path: /etc/rabbitmq/</h3>
<ul>
<li>1 enabled_plugins</li>
<li>2 rabbitmq.conf</li>
<li>3 rabbitmq-env.conf</li>
</ul>
<p><code>RABBITMQ_NODE_PORT:5672</code></p>
<p><a href="http://www.rabbitmq.com/configure.html" target="_blank">Configuration</a></br>
<a href="http://www.rabbitmq.com/man/rabbitmq-env.conf.5.man.html" target="_blank">rabbitmq-env.cof</a></p>
<p><a href="http://my.oschina.net/moooofly/blog/107890" target="_blank">RabbitMQ启动参数具体含义</a>, 偶还没仔细看</p>
<h2 id="-web-"><strong>安装web插件管理界面</strong></h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="variable">$rabbitmq</span><span class="attribute">-plugins</span> enable rabbitmq_management
<span class="variable">$ls</span> /etc/rabbitmq
$/etc/init<span class="built_in">.</span>d/rabbitmq<span class="attribute">-server</span> restart
</pre></td></tr></table></figure>

<p>查看：<code>http://localhost:15672</code> 用户名/密码：<code>guest/guest</code>
<img src="http://static.oschina.net/uploads/space/2014/0112/013834_G2rv_222173.gif" alt="效果图"></p>
<h2 id="-"><strong>用户管理</strong></h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="number">1</span>.添加用户
<span class="variable">$rabbitmqctl</span> add_user username password
<span class="number">2</span>.删除用户
<span class="variable">$rabbitmqctl</span> delete_user username
<span class="number">3</span>.修改密码
<span class="variable">$rabbitmqctl</span> change_password username newpassword
<span class="number">4</span>.列出所有用户
<span class="variable">$rabbitmqctl</span> list_users
<span class="number">5</span>.用户赋权
<span class="variable">$rabbitmqctl</span> <span class="keyword">set</span>_user_tags newuser administrator
</pre></td></tr></table></figure>

<h2 id="-"><strong>插件</strong></h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="code"><pre>1. 查看所有插件
$<span class="tag">rabbitmq-plugins</span> <span class="tag">list</span>

<span class="attr_selector">[e]</span> <span class="tag">amqp_client</span>                       3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">cowboy</span>                            0<span class="class">.5</span><span class="class">.0-rmq3</span><span class="class">.2</span><span class="class">.3-git4b93c2d</span>
<span class="attr_selector">[ ]</span> <span class="tag">eldap</span>                             3<span class="class">.2</span><span class="class">.3-gite309de4</span>
<span class="attr_selector">[e]</span> <span class="tag">mochiweb</span>                          2<span class="class">.7</span><span class="class">.0-rmq3</span><span class="class">.2</span><span class="class">.3-git680dba8</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_amqp1_0</span>                  3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_auth_backend_ldap</span>        3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_auth_mechanism_ssl</span>       3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_consistent_hash_exchange</span> 3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_federation</span>               3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_federation_management</span>    3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_jsonrpc</span>                  3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_jsonrpc_channel</span>          3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_jsonrpc_channel_examples</span> 3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[E]</span> <span class="tag">rabbitmq_management</span>               3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[e]</span> <span class="tag">rabbitmq_management_agent</span>         3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_management_visualiser</span>    3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_mqtt</span>                     3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_shovel</span>                   3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_shovel_management</span>        3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_stomp</span>                    3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_tracing</span>                  3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[e]</span> <span class="tag">rabbitmq_web_dispatch</span>             3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_web_stomp</span>                3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rabbitmq_web_stomp_examples</span>       3<span class="class">.2</span><span class="class">.3</span>
<span class="attr_selector">[ ]</span> <span class="tag">rfc4627_jsonrpc</span>                   3<span class="class">.2</span><span class="class">.3-git5e67120</span>
<span class="attr_selector">[ ]</span> <span class="tag">sockjs</span>                            0<span class="class">.3</span><span class="class">.4-rmq3</span><span class="class">.2</span><span class="class">.3-git3132eb9</span>
<span class="attr_selector">[e]</span> <span class="tag">webmachine</span>                        1<span class="class">.10</span><span class="class">.3-rmq3</span><span class="class">.2</span><span class="class">.3-gite9359c7</span>


2. 激活插件
$<span class="tag">rabbitmq-plugins</span> <span class="tag">enable</span> <span class="tag">rabbitmq_management</span>

3. 关闭插件
$<span class="tag">rabbitmq-plugins</span> <span class="tag">disable</span> <span class="tag">rabbitmq_management</span>
</pre></td></tr></table></figure>

<h2 id="-java-"><strong>测试用的Java代码</strong></h2>
<p>代码来源： <a href="http://www.oschina.net/translate/getting-started-with-rabbitmq-in-java?cmp" target="_blank">RabbitMQ 入门指南(Java)</a></br></p>
<p><strong>依赖Jar</strong>： amqp-client-3.0.4.jar， commons-lang-2.6.jar</p>
<p>EndPoint.java</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre><span class="keyword">package</span> examples.rabbitmq;

<span class="keyword">import</span> java.io.IOException;

<span class="keyword">import</span> com.rabbitmq.client.Channel;
<span class="keyword">import</span> com.rabbitmq.client.Connection;
<span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;

<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EndPoint</span> {</span>

	<span class="keyword">protected</span> Channel channel;
	<span class="keyword">protected</span> Connection connection;
	<span class="keyword">protected</span> String endPointName;

	<span class="keyword">public</span> <span class="title">EndPoint</span>(String endpointName) <span class="keyword">throws</span> IOException {
		<span class="keyword">this</span>.endPointName = endpointName;

		<span class="comment">// Create a connection factory</span>
		ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();

		<span class="comment">// hostname of your rabbitmq server</span>
		factory.setHost(<span class="string">"192.168.6.129"</span>);

		<span class="comment">// getting a connection</span>
		connection = factory.newConnection();

		<span class="comment">// creating a channel</span>
		channel = connection.createChannel();

		<span class="comment">// declaring a queue for this channel. If queue does not exist,</span>
		<span class="comment">// it will be created on the server.</span>
		channel.queueDeclare(endpointName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);
	}

	<span class="javadoc">/**
	 * 关闭channel和connection。并非必须，因为隐含是自动调用的。
	 * 
	 *<span class="javadoctag"> @throws</span> IOException
	 */</span>
	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span>() <span class="keyword">throws</span> IOException {
		<span class="keyword">this</span>.channel.close();
		<span class="keyword">this</span>.connection.close();
	}
}
</pre></td></tr></table></figure>

<p>Producer.java</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="keyword">package</span> examples.rabbitmq;

<span class="keyword">import</span> java.io.IOException;
<span class="keyword">import</span> java.io.Serializable;

<span class="keyword">import</span> org.apache.commons.lang.SerializationUtils;


<span class="javadoc">/**
 * The producer endpoint that writes to the queue.
 *<span class="javadoctag"> @author</span> syntx
 *
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">EndPoint</span>{</span>
	
	<span class="keyword">public</span> <span class="title">Producer</span>(String endPointName) <span class="keyword">throws</span> IOException{
		<span class="keyword">super</span>(endPointName);
	}

	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span>(Serializable object) <span class="keyword">throws</span> IOException {
	    channel.basicPublish(<span class="string">""</span>,endPointName, <span class="keyword">null</span>, SerializationUtils.serialize(object));
	}	
}
</pre></td></tr></table></figure>

<p>QueueConsumer.java</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
</pre></td><td class="code"><pre>
<span class="keyword">package</span> examples.rabbitmq;

<span class="keyword">import</span> java.io.IOException;
<span class="keyword">import</span> java.util.HashMap;
<span class="keyword">import</span> java.util.Map;

<span class="keyword">import</span> org.apache.commons.lang.SerializationUtils;

<span class="keyword">import</span> com.rabbitmq.client.AMQP.BasicProperties;
<span class="keyword">import</span> com.rabbitmq.client.Consumer;
<span class="keyword">import</span> com.rabbitmq.client.Envelope;
<span class="keyword">import</span> com.rabbitmq.client.ShutdownSignalException;


<span class="javadoc">/**
 * 读取队列的程序端，实现了Runnable接口。
 *<span class="javadoctag"> @author</span> syntx
 *
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueConsumer</span> <span class="keyword">extends</span> <span class="title">EndPoint</span> <span class="keyword">implements</span> <span class="title">Runnable</span>, <span class="title">Consumer</span>{</span>
	
	<span class="keyword">public</span> <span class="title">QueueConsumer</span>(String endPointName) <span class="keyword">throws</span> IOException{
		<span class="keyword">super</span>(endPointName);		
	}
	
	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {
		<span class="keyword">try</span> {
			<span class="comment">//start consuming messages. Auto acknowledge messages.</span>
			channel.basicConsume(endPointName, <span class="keyword">true</span>,<span class="keyword">this</span>);
		} <span class="keyword">catch</span> (IOException e) {
			e.printStackTrace();
		}
	}

	<span class="javadoc">/**
	 * Called when consumer is registered.
	 */</span>
	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleConsumeOk</span>(String consumerTag) {
		System.out.println(<span class="string">"Consumer "</span>+consumerTag +<span class="string">" registered"</span>);		
	}

	<span class="javadoc">/**
	 * Called when new message is available.
	 */</span>
	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span>(String consumerTag, Envelope env,
			BasicProperties props, <span class="keyword">byte</span>[] body) <span class="keyword">throws</span> IOException {
		Map map = (HashMap)SerializationUtils.deserialize(body);
	    System.out.println(<span class="string">"Message Number "</span>+ map.get(<span class="string">"message number"</span>) + <span class="string">" received."</span>);
		
	}

	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleCancel</span>(String consumerTag) {}
	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleCancelOk</span>(String consumerTag) {}
	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRecoverOk</span>(String consumerTag) {}
	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleShutdownSignal</span>(String consumerTag, ShutdownSignalException arg1) {}
}
</pre></td></tr></table></figure>

<p>Main.java</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="keyword">package</span> examples.rabbitmq;

<span class="keyword">import</span> java.io.IOException;
<span class="keyword">import</span> java.sql.SQLException;
<span class="keyword">import</span> java.util.HashMap;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> {</span>
	<span class="keyword">public</span> <span class="title">Main</span>() <span class="keyword">throws</span> Exception{
		
		QueueConsumer consumer = <span class="keyword">new</span> QueueConsumer(<span class="string">"queue"</span>);
		Thread consumerThread = <span class="keyword">new</span> Thread(consumer);
		consumerThread.start();
		
		Producer producer = <span class="keyword">new</span> Producer(<span class="string">"queue"</span>);
		
		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) {
			HashMap message = <span class="keyword">new</span> HashMap();
			message.put(<span class="string">"message number"</span>, i);
			producer.sendMessage(message);
			System.out.println(<span class="string">"Message Number "</span>+ i +<span class="string">" sent."</span>);
		}
	}
	
	<span class="javadoc">/**
	 *<span class="javadoctag"> @param</span> args
	 *<span class="javadoctag"> @throws</span> SQLException 
	 *<span class="javadoctag"> @throws</span> IOException 
	 */</span>
	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> Exception{
	  <span class="keyword">new</span> Main();
	}
}
</pre></td></tr></table></figure>

<hr>
<h1 id="-">参考文章</h1>
<p><a href="http://www.nsbeta.info/archives/200" target="_blank">消息队列RabbitMQ入门介绍</a></br>
<a href="http://www.oschina.net/translate/scalable-web-architecture-and-distributed-systems?lang=chs&amp;#" target="_blank">可扩展Web架构与分布式系统</a>  想看来着，但是文章实在是太长了 -_-!</br>
<a href="http://my.oschina.net/fhck/blog/71691" target="_blank">RabbitMQ之消息发布订阅与信息持久化技术</a></br>
<a href="http://my.oschina.net/moooofly/blog/107890" target="_blank">RabbitMQ启动参数具体含义</a></br>
<a href="http://my.oschina.net/moooofly/blog/88769" target="_blank">rabbitmq-service用户手册</a></br>
<a href="http://blog.csdn.net/historyasamirror/article/details/6827870" target="_blank">RabbitMQ的安装，配置，监控</a></p>
]]></content>
    <summary type="html"><![CDATA[<p>RabbitMQ 是由 LShift 提供的一个 Advanced Message Queuing Protocol (AMQP) 的开源实现，由以高性能、健壮以及可伸缩性出名的 Erlang 写成，因此也是继承了这些优点。</p>
]]></summary>
    
      <category term="rabbit" scheme="http://youfei.github.io/tags/rabbit/"/>
    
      <category term="rabbit" scheme="http://youfei.github.io/categories/rabbit/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[杂记]]></title>
    <link href="http://youfei.github.io/2014/02/27/others-1/"/>
    <id>http://youfei.github.io/2014/02/27/others-1/</id>
    <published>2014-02-27T02:09:10.000Z</published>
    <updated>2014-02-27T09:42:55.000Z</updated>
    <content type="html"><![CDATA[<p>安装了下虚拟机，并在上面搭了下环境</p>
<a id="more"></a>

<h1 id="-">虚拟机安装</h1>
<p>1 orcale 的 VBox 很烂，再一次挂掉，不能忍啊。 <strong>卸掉</strong></br>
2 VMWare 还要注册 。。。 <strong>溜掉</strong></br>
3 VMWare Player <strong>Good</strong></br></p>
<p><a href="https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/6_0" target="_blank">VMWare Player Download Link -&gt; </a>
<a href="http://www.ubuntu.org.cn/download/ubuntu/download-zh" target="_blank">ubuntu iso -&gt; </a></p>
<h1 id="-ssh">安装ssh</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>sudo apt-get install openssh-server

Try:  ssh <span class="tag">&lt;<span class="title">username</span>&gt;</span>@<span class="tag">&lt;<span class="title">remote</span> <span class="attribute">ip</span>&gt;</span>
</pre></td></tr></table></figure>

<hr>
<h1 id="-monit">安装monit</h1>
<p>主要参考：
<a href="http://feilong.me/2011/02/monitor-core-processes-with-monit" target="_blank">link1</a>, <a href="http://mmonit.com/monit/documentation/monit.html" target="_blank">mmonit doc link</a></br></p>
<p>以下来源<strong>link1</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="built_in">sudo</span> apt-get install monit
--- <span class="built_in">sudo</span> apt-get remove monit

/var/monit/monitrc	//配置文件

<span class="built_in">sudo</span> /etc/init.d/monit start
<span class="built_in">sudo</span> /etc/init.d/monit stop
<span class="built_in">sudo</span> /etc/init.d/monit restart
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
</pre></td><td class="code"><pre><span class="comment">##</span>
<span class="comment">## 示例monit配置文件，说明：</span>
<span class="comment">## 1. 域名以example.com为例。</span>
<span class="comment">## 2. 后面带xxx的均是举例用的名字，需要根据自己的需要修改。</span>
<span class="comment">##</span>
<span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span>
<span class="comment">## Monit control file</span>
<span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span>
<span class="comment">#</span>
<span class="comment"># 检查周期，默认为2分钟，对于网站来说有点长，可以根据需要自行调节，这改成30秒。</span>
set daemon  <span class="number">30</span>

<span class="comment"># 日志文件</span>
set logfile /<span class="reserved">var</span>/log/monit.log

<span class="comment">#</span>
<span class="comment"># 邮件通知服务器</span>
<span class="comment">#</span>
<span class="comment">#set mailserver mail.example.com</span>
set mailserver localhost           

<span class="comment">#</span>
<span class="comment"># 通知邮件的格式设置，下面是默认格式供参考</span>
<span class="comment">#</span>
<span class="comment">## Monit by default uses the following alert mail format:</span>
<span class="comment">##</span>
<span class="comment">## --8&lt;--</span>
<span class="comment">## From: monit@$HOST                         # sender</span>
<span class="comment">## Subject: monit alert --  $EVENT $SERVICE  # subject</span>
<span class="comment">##</span>
<span class="comment">## $EVENT Service $SERVICE                   #</span>
<span class="comment">##                                           #</span>
<span class="comment">## 	Date:        $DATE                   #</span>
<span class="comment">## 	Action:      $ACTION                 #</span>
<span class="comment">## 	Host:        $HOST                   # body</span>
<span class="comment">## 	Description: $DESCRIPTION            #</span>
<span class="comment">##                                           #</span>
<span class="comment">## Your faithful employee,                   #</span>
<span class="comment">## monit                                     #</span>
<span class="comment">## --8&lt;--</span>
<span class="comment">##</span>
<span class="comment">## You can override the alert message format or its parts such as subject</span>
<span class="comment">## or sender using the MAIL-FORMAT statement. Macros such as $DATE, etc.</span>
<span class="comment">## are expanded on runtime. For example to override the sender:</span>
<span class="comment">#</span>
<span class="comment"># 简单的，这只改了一下发送人，有需要可以自己修改其它内容。</span>
set mail-format { <span class="attribute">from</span>: webmaster<span class="property">@example</span>.com }

<span class="comment"># 设置邮件通知接收者。建议发到gmail，方便邮件过滤。</span>
set alert userxxx<span class="property">@gmail</span>.com

set httpd port <span class="number">2812</span> <span class="keyword">and</span>            <span class="comment"># 设置http监控页面的端口</span>
     use address www.example.com   <span class="comment"># http监控页面的IP或域名</span>
     allow localhost               <span class="comment"># 允许本地访问</span>
     allow <span class="number">58.68</span><span class="number">.78</span><span class="number">.0</span>/<span class="number">24</span>           <span class="comment"># 允许此IP段访问</span>
     <span class="comment">##allow 0.0.0.0/0.0.0.0       # 允许任何IP段，不建议这样干</span>
     allow <span class="attribute">userxxx</span>:passwordxxx     <span class="comment"># 访问用户名密码</span>

<span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span>
<span class="comment">## Services</span>
<span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">#</span>
<span class="comment">#</span>
<span class="comment"># 系统整体运行状况监控，默认的就可以，可以自己去微调</span>
<span class="comment">#</span>
<span class="comment"># 系统名称，可以是IP或域名</span>
check system www.example.com
    <span class="keyword">if</span> loadavg (<span class="number">1</span>min) &gt; <span class="number">4</span> <span class="keyword">then</span> alert
    <span class="keyword">if</span> loadavg (<span class="number">5</span>min) &gt; <span class="number">2</span> <span class="keyword">then</span> alert
    <span class="keyword">if</span> memory usage &gt; <span class="number">75</span>% <span class="keyword">then</span> alert
    <span class="keyword">if</span> cpu usage (user) &gt; <span class="number">70</span>% <span class="keyword">then</span> alert
    <span class="keyword">if</span> cpu usage (system) &gt; <span class="number">30</span>% <span class="keyword">then</span> alert
    <span class="keyword">if</span> cpu usage (wait) &gt; <span class="number">20</span>% <span class="keyword">then</span> alert

<span class="comment">#</span>
<span class="comment"># 监控nginx</span>
<span class="comment">#</span>
<span class="comment"># 需要提供进程pid文件信息</span>
check process nginx <span class="reserved">with</span> pidfile /<span class="reserved">var</span>/run/nginx.pid
    <span class="comment"># 进程启动命令行，注：必须是命令全路径</span>
    start program = <span class="string">"/etc/init.d/nginx start"</span>
    <span class="comment"># 进程关闭命令行</span>
    stop program  = <span class="string">"/etc/init.d/nginx stop"</span>
    <span class="comment"># nginx进程状态测试，监测到nginx连不上了，则自动重启</span>
    <span class="keyword">if</span> failed host www.example.com port <span class="number">80</span> protocol http <span class="keyword">then</span> restart
    <span class="comment"># 多次重启失败将不再尝试重启，这种就是系统出现严重错误的情况</span>
    <span class="keyword">if</span> <span class="number">3</span> restarts within <span class="number">5</span> cycles <span class="keyword">then</span> timeout
    <span class="comment"># 可选，设置分组信息</span>
    group server

<span class="comment">#   可选的ssl端口的监控，如果有的话</span>
<span class="comment">#    if failed port 443 type tcpssl protocol http</span>
<span class="comment">#       with timeout 15 seconds</span>
<span class="comment">#       then restart</span>

<span class="comment">#</span>
<span class="comment"># 监控apache</span>
<span class="comment">#</span>
check process apache <span class="reserved">with</span> pidfile /<span class="reserved">var</span>/run/apache2.pid
    start program = <span class="string">"/etc/init.d/apache2 start"</span>
    stop program  = <span class="string">"/etc/init.d/apache2 stop"</span>
    <span class="comment"># apache吃cpu和内存比较厉害，额外添加一些关于这方面的监控设置</span>
    <span class="keyword">if</span> cpu &gt; <span class="number">50</span>% <span class="keyword">for</span> <span class="number">2</span> cycles <span class="keyword">then</span> alert
    <span class="keyword">if</span> cpu &gt; <span class="number">70</span>% <span class="keyword">for</span> <span class="number">5</span> cycles <span class="keyword">then</span> restart
    <span class="keyword">if</span> totalmem &gt; <span class="number">1500</span> MB <span class="keyword">for</span> <span class="number">10</span> cycles <span class="keyword">then</span> restart
    <span class="keyword">if</span> children &gt; <span class="number">250</span> <span class="keyword">then</span> restart
    <span class="keyword">if</span> loadavg(<span class="number">5</span>min) greater than <span class="number">10</span> <span class="keyword">for</span> <span class="number">20</span> cycles <span class="keyword">then</span> stop
    <span class="keyword">if</span> failed host www.example.com port <span class="number">8080</span> protocol http <span class="keyword">then</span> restart
    <span class="keyword">if</span> <span class="number">3</span> restarts within <span class="number">5</span> cycles <span class="keyword">then</span> timeout
    group server
    <span class="comment"># 可选，依赖于nginx</span>
    depends <span class="literal">on</span> nginx

<span class="comment">#</span>
<span class="comment"># 监控spawn-fcgi进程(其实就是fast-cgi进程)</span>
<span class="comment">#</span>
check process spawn-fcgi <span class="reserved">with</span> pidfile /<span class="reserved">var</span>/run/spawn-fcgi.pid
    <span class="comment"># spawn-fcgi一定要带-P参数才会生成pid文件，默认是没有的</span>
    start program = <span class="string">"/usr/bin/spawn-fcgi -a 127.0.0.1 -p 8081 -C 10 -u userxxx -g groupxxx -P /var/run/spawn-fcgi.pid -f /usr/bin/php-cgi"</span>
    stop program = <span class="string">"/usr/bin/killall /usr/bin/php-cgi"</span>
    <span class="comment"># fast-cgi走的不是http协议，monit的protocol参数也没有cgi对应的设置，这里去掉protocol http即可。</span>
    <span class="keyword">if</span> failed host <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> port <span class="number">8081</span> <span class="keyword">then</span> restart
    <span class="keyword">if</span> <span class="number">3</span> restarts within <span class="number">5</span> cycles <span class="keyword">then</span> timeout
    group server
    depends <span class="literal">on</span> nginx
</pre></td></tr></table></figure>

<blockquote><ul>
<li><p>start和stop的program参数里的命令必须是全路径，否则monit不能正常启动，比如killall应该是/usr/bin/killall。</p>
</li>
<li><p>对于spawn-fcgi，很多人会用它来管理PHP的fast-cgi进程，但spawn-fcgi本身也是有可能挂掉的，所以还是需要用monit来监控spawn-fcgi。spawn-fcgi必须带-P参数才会有pid文件，而且fast-cgi走的不是http协议，monit的protocol参数也没有cgi对应的设置，一定要去掉protocol http这项设置才管用。</p>
</li>
<li><p>进程多次重启失败monit将不再尝试重启，收到这样的通知邮件表明系统出现了严重的问题，要引起足够的重视，需要赶紧人工处理。</p>
</li>
</ul>
</blockquote>


<hr>
<h1 id="-chrome">安装Chrome</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>
download: google<span class="attribute">-chrome</span><span class="attribute">-stable_current_i386</span><span class="built_in">.</span>deb
sudo dpkg <span class="attribute">-i</span> google<span class="attribute">-chrome</span><span class="attribute">-stable_current_i386</span><span class="built_in">.</span>deb
sudo apt<span class="attribute">-get</span> install <span class="attribute">-f</span>
</pre></td></tr></table></figure>

<hr>
<h1 id="-jdk">安装JDK</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre>$ getconf LONG_BIT	<span class="comment">//操作系统位数</span>
<span class="number">32</span>

$ lsb_release <span class="attribute">-a</span>	<span class="comment">//操作系统信息</span>
No LSB modules are available<span class="built_in">.</span>
Distributor ID: Ubuntu
Description:    Ubuntu <span class="number">12.04</span><span class="number">.3</span> LTS
Release:        <span class="number">12.04</span>
Codename:       precise

<span class="number">1</span> sudo apt<span class="attribute">-get</span> purge openjdk<span class="subst">*</span>
<span class="number">2</span> Download ： jdk<span class="subst">-</span><span class="number">7</span>u51<span class="attribute">-linux</span><span class="attribute">-i586</span><span class="built_in">.</span>tar<span class="built_in">.</span>gz
<span class="number">3</span> sudo su
<span class="number">4</span> mkdir /usr/lib/java
<span class="number">5</span> cd /usr/lib/java
<span class="number">6</span> mv ~/Downloads/jdk<span class="subst">-</span><span class="number">7</span>u51<span class="attribute">-linux</span><span class="attribute">-i586</span><span class="built_in">.</span>tar<span class="built_in">.</span>gz <span class="built_in">.</span>
<span class="number">7</span> tar xvf jdk<span class="subst">-</span><span class="number">7</span>u51<span class="attribute">-linux</span><span class="attribute">-i586</span><span class="built_in">.</span>tar<span class="built_in">.</span>gz
<span class="number">8</span> mv jdk1<span class="number">.7</span><span class="number">.0</span>_51<span class="subst">/</span> java<span class="subst">-</span><span class="number">7</span><span class="attribute">-sun</span>
<span class="number">9</span> vi /etc/environment
<span class="number">10</span> PATH<span class="subst">=</span><span class="string">"/usr/lib/java/java-7-sun/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games"</span>
   JAVA_HOME<span class="subst">=</span><span class="string">"/usr/lib/java/java-7-sun"</span>
   CLASSPATH<span class="subst">=</span><span class="string">"/usr/lib/java/java-7-sun/lib"</span>
<span class="number">11</span> source /etc/environment
<span class="number">12</span> java <span class="attribute">-version</span>
<span class="number">13</span> Done
</pre></td></tr></table></figure>

<hr>
<h1 id="-tomcat">安装Tomcat</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>
<span class="number">1</span> Download Tomcat
<span class="number">2</span> vi ~/.bashrc
<span class="number">3</span> <span class="keyword">export</span> CATALINA_HOME=&lt;apache-tomcat path&gt;
  <span class="keyword">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$CATALINA_HOME</span>/bin
<span class="number">4</span> Done
</pre></td></tr></table></figure>

<hr>
<h1 id="-tomcat-">添加Tomcat启动脚本</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="comment"># !/bin/bash</span>
<span class="comment"># Usage:        tomcat [start|stop|reload|restart]</span>
<span class="comment">#</span>

<span class="keyword">export</span> JAVA_HOME= 
<span class="keyword">export</span> CATALINA_HOME= 
<span class="keyword">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/bin

<span class="keyword">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin
<span class="keyword">export</span> BASH_ENV=<span class="variable">$HOME</span>/.bashrc
<span class="keyword">export</span> USERNAME=<span class="string">"root"</span>


<span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span>
	start)
	   	<span class="built_in">echo</span> -n <span class="string">"tomcat start: "</span>
	 	<span class="built_in">cd</span> <span class="variable">$CATALINA_HOME</span>/bin/
	 	sh startup.sh
	   	<span class="built_in">echo</span> <span class="string">"Done"</span>
		;;
	stop)
   		<span class="built_in">echo</span> -n <span class="string">"tomcat stop:"</span>
   		<span class="built_in">cd</span> <span class="variable">$CATALINA_HOME</span>/bin/
   		sh shutdown.sh
   		<span class="built_in">echo</span> <span class="string">"Done"</span>
		;;
	restart)
	    <span class="variable">$0</span> stop
	    <span class="variable">$0</span> start
		;;
	*)
	   <span class="built_in">echo</span> <span class="string">"Usage: tomcat [start|stop|reload|restart]"</span>
	   <span class="keyword">exit</span> <span class="number">1</span>

<span class="keyword">esac</span>
<span class="keyword">exit</span> <span class="number">0</span>
</pre></td></tr></table></figure>

<hr>
<h1 id="monit-tomcat-">monit添加tomcat监听</h1>
<p><a href="http://blog.chinaunix.net/uid-21516619-id-1825022.html" target="_blank">参考</a> </br>
<a href="http://portable.easylife.tw/2407?category=4" target="_blank">参考</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>
check <span class="built_in">process</span> tomcat <span class="operator">with</span> pidfile /var/run/catalina.pid
    start program = <span class="string">"/etc/init.d/tomcat start"</span>
    stop program  = <span class="string">"/etc/init.d/tomcat stop"</span>
        <span class="keyword">if</span> <span class="number">9</span> restarts <span class="operator">within</span> <span class="number">10</span> cycles <span class="keyword">then</span> timeout
    <span class="keyword">if</span> failed url <span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span>/ timeout <span class="number">120</span> <span class="built_in">seconds</span> <span class="keyword">for</span> <span class="number">5</span> cycles <span class="keyword">then</span> restart
</pre></td></tr></table></figure>

<p><strong>catalina.pid</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>vi $CATALINA_HOME/bin/catalina<span class="preprocessor">.sh</span>

<span class="keyword">Add</span> Line: CATALINA_PID=/var/run/catalina<span class="preprocessor">.pid</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>monit -h
monit -d 30
monit <span class="operator"><span class="keyword">start</span> tomcat || monit <span class="keyword">start</span> <span class="keyword">all</span>
monit status

<span class="keyword">CHECK</span>: http://localhost:<span class="number">2812</span>

monit stop tomcat</span>
</pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>安装了下虚拟机，并在上面搭了下环境</p>
]]></summary>
    
      <category term="比较杂乱" scheme="http://youfei.github.io/tags/%E6%AF%94%E8%BE%83%E6%9D%82%E4%B9%B1/"/>
    
      <category term="比较杂乱" scheme="http://youfei.github.io/categories/%E6%AF%94%E8%BE%83%E6%9D%82%E4%B9%B1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Golang语法初读-4]]></title>
    <link href="http://youfei.github.io/2014/02/25/go-g-5/"/>
    <id>http://youfei.github.io/2014/02/25/go-g-5/</id>
    <published>2014-02-25T02:50:29.000Z</published>
    <updated>2014-02-25T05:46:29.000Z</updated>
    <content type="html"><![CDATA[<p>继续看书哈</p>
<a id="more"></a>

<hr>
<h1 id="md5-sha">Md5 &amp; Sha</h1>
<p><strong>Code解释大法</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre>package main

import (
	<span class="string">"fmt"</span>
	<span class="string">"crypto/sha1"</span>
	<span class="string">"crypto/md5"</span>
)

func main () {
	
	var TestString string = string(<span class="string">"admin"</span>)
	
	Md5Inst := md5.New()
	Md5Inst.Write([]byte (TestString))
	Result := Md5Inst.Sum([]byte(<span class="string">""</span>))
	
	fmt.Printf(<span class="string">"%x\n"</span>,Result)
	
	Sha1Inst := sha1.New()
	Sha1Inst.Write([]byte (TestString))
	Result = Sha1Inst.Sum([]byte(<span class="string">""</span>))
	
	fmt.Printf(<span class="string">"%x\n"</span>,Result)
}
</pre></td></tr></table></figure>

<hr>
<h1 id="-">单元测试</h1>
<p>和JUnit差不多</p>
<hr>
<h1 id="-">发布</h1>
<p>太差了！！！</p>
<blockquote><p>打包源代码进行分发，使用者自行编译！！！</p>
<p>现在严重鄙视各种自行编译！！！（突然想起了python，嘿嘿）</p>
</blockquote>


<hr>
<h1 id="-">反射</h1>
<p>反射是高配置，灵活性的体现，但确实是把双刃剑。
高配置，灵活性 === 繁琐，可读性，可维护性 差</p>
<p>Go 中的反射，主要是两个概念Type和Value</p>
<p>用书中的例子，记录下</p>
<p><strong>//传值</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>var <span class="built_in">x</span> float64 = <span class="number">3.4</span>
v := reflect<span class="preprocessor">.ValueOf</span>(<span class="built_in">x</span>) 
v<span class="preprocessor">.Set</span>(<span class="number">4.1</span>)
</pre></td></tr></table></figure>

<p><strong>//传址</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>var <span class="built_in">x</span> float64 = <span class="number">3.4</span>
p := reflect<span class="preprocessor">.ValueOf</span>(&<span class="built_in">x</span>)
fmt<span class="preprocessor">.Println</span>(<span class="string">"Type of P : "</span>, p<span class="preprocessor">.Type</span>())
fmt<span class="preprocessor">.Println</span>(<span class="string">"settability of p : "</span>, p<span class="preprocessor">.CanSet</span>())

<span class="label">v:</span>= p<span class="preprocessor">.Elem</span>()
fmt<span class="preprocessor">.Println</span>(<span class="string">"settability of v : "</span>, v<span class="preprocessor">.CanSet</span>())


v<span class="preprocessor">.SetFloat</span>(<span class="number">7.1</span>)
fmt<span class="preprocessor">.Println</span>(<span class="string">"v : "</span>, v<span class="preprocessor">.Interface</span>())
fmt<span class="preprocessor">.Println</span>(<span class="string">"x : "</span>, <span class="built_in">x</span>)
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">Type</span> <span class="keyword">of</span> P :  *float64
settability <span class="keyword">of</span> p :  <span class="keyword">false</span>
settability <span class="keyword">of</span> v :  <span class="keyword">true</span>
v :  <span class="number">7.1</span>
x :  <span class="number">7.1</span>
</pre></td></tr></table></figure>

<hr>
<h1 id="-">语言交互性</h1>
<p>Cgo 没啥兴趣</p>
<hr>
<h1 id="go-">Go标准库</h1>
<ul>
<li>输入输出
  <strong>bufio, fmt, io, log, flag(处理命令行参数)</strong></li>
<li>文本处理
  <strong>encoding, bytes, strings, strconv, text, mime, unicode, regexp, index, path(处理路径字符串)</strong></li>
<li>网络
  <strong>net, http, expvar</strong></li>
<li>系统
  <strong>os, syscall, sync, time, unsafe</strong></li>
<li>数据结构和算法
  <strong>math, sort, container, crypto, hash, archive, compress, image(图像编码算法)</strong></li>
<li>RunTime
  <strong>runtime, reflect, go</strong></li>
</ul>
<hr>
<h1 id="-">初读感受</h1>
<p>没啥东东，interface{}? goroutine? defer糖？</p>
<p>还需要多发展发展，不知道以后在Android 上怎么样，给条活路哈</p>
<p>打包，发布啥的，这都什么年代啦... MakeFile?</p>
<p>现在就觉得做个MessageQueue 啥的还行，和Erlang拼杀?</p>
<p>Done</p>
]]></content>
    <summary type="html"><![CDATA[<p>继续看书哈</p>
]]></summary>
    
      <category term="golang" scheme="http://youfei.github.io/tags/golang/"/>
    
      <category term="Golang" scheme="http://youfei.github.io/categories/Golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[逃离帝都]]></title>
    <link href="http://youfei.github.io/2014/02/25/life-1/"/>
    <id>http://youfei.github.io/2014/02/25/life-1/</id>
    <published>2014-02-25T01:08:05.000Z</published>
    <updated>2014-02-25T05:36:50.000Z</updated>
    <content type="html"><![CDATA[<p>连续爆表，把俺家的净化器都快搞炸了！</br>
静电的咋样？咋的滤网的总感到效果寥寥了都-_-!</p>
<p>额滴<strong>肺</strong>啊</p>
<a id="more"></a>

<blockquote><p><strong>现在满脑子都是：如何快速赚钱，提前退休， 逃离帝都啊！！！</strong></p>
<p><strong>哎 是时候去研究下 中彩票大法了</strong></p>
<p><strong>                                        --帝都苦逼青年一枚</strong></p>
<footer><strong>帝都苦逼青年</strong></footer></blockquote>



<p><strong>刚看到了快递小哥，想到：真是用生命来送快递啊</strong></p>
]]></content>
    <summary type="html"><![CDATA[<p>连续爆表，把俺家的净化器都快搞炸了！</br>
静电的咋样？咋的滤网的总感到效果寥寥了都-_-!</p>
<p>额滴<strong>肺</strong>啊</p>
]]></summary>
    
      <category term="生活杂记" scheme="http://youfei.github.io/tags/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
      <category term="生活杂记" scheme="http://youfei.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Golang语法初读-3]]></title>
    <link href="http://youfei.github.io/2014/02/24/go-g-4/"/>
    <id>http://youfei.github.io/2014/02/24/go-g-4/</id>
    <published>2014-02-24T07:40:45.000Z</published>
    <updated>2014-02-25T09:02:56.000Z</updated>
    <content type="html"><![CDATA[<p>Go网络编程</p>
<a id="more"></a>

<h1 id="socket-">Socket编程</h1>
<h2 id="client-side">Client Side</h2>
<p><code>func Dial (net, addr string) (Conn, error)</code></br></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="comment">//TCP</span>
conn, err := net.Dial (<span class="string">"tcp"</span>, <span class="string">"192.168.0.1:9000"</span>)

<span class="comment">//UDP</span>
conn, err := net.Dial (<span class="string">"udp"</span>, <span class="string">"192.168.0.1:9000"</span>)

<span class="comment">//ICMP</span>
conn, err := net.Dial (<span class="string">"ip4.icmp"</span>, <span class="string">"192.168.0.1:9000"</span>)
</pre></td></tr></table></figure>

<h2 id="server-side">Server Side</h2>
<p><code>func Listen(net, laddr string) (l Listener, err os.Error)</code></br></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>service := <span class="string">":1200"</span>
<span class="comment">//TCP</span>
conn, err := net.Listen(<span class="string">"tcp"</span>, service)

<span class="comment">//UDP</span>
conn, err := net.Listen (<span class="string">"udp"</span>, service)
</pre></td></tr></table></figure>

<blockquote><p>I THINK: It is cool !</p>
</blockquote>


<hr>
<h1 id="http-">Http编程</h1>
<h2 id="client-side">Client Side</h2>
<p><code>func (c *Client) Get (url string) (r *Response, err error)</code></br>
<code>func (c *Client) Post (url string, bodyType string, body io.Reader) (r *Response, err error)</code></br>
<code>func (c *Client) PostForm (url string, data url.Values) (r *Respone, err error)</code></br>
<code>func (c *Client) Head (url, string) (r *Response, err error)</code></br>
<code>func (c *Client) Do (request *Requset) (resp *Response, err error)</code></br></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre>//从网上贴的，偷懒啦~
package main
 
import (
    <span class="string">"net/http"</span>
    <span class="string">"io/ioutil"</span>
    <span class="string">"fmt"</span>
)
 
func main() {
    client := &http<span class="preprocessor">.Client</span>{}
    reqest, _ := http<span class="preprocessor">.NewRequest</span>(<span class="string">"GET"</span>, <span class="string">"http://www.baidu.com"</span>, nil)
     
    reqest<span class="preprocessor">.Header</span><span class="preprocessor">.Set</span>(<span class="string">"Accept"</span>,<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>)
    reqest<span class="preprocessor">.Header</span><span class="preprocessor">.Set</span>(<span class="string">"Accept-Charset"</span>,<span class="string">"GBK,utf-8;q=0.7,*;q=0.3"</span>)
    reqest<span class="preprocessor">.Header</span><span class="preprocessor">.Set</span>(<span class="string">"Accept-Encoding"</span>,<span class="string">"gzip,deflate,sdch"</span>)
    reqest<span class="preprocessor">.Header</span><span class="preprocessor">.Set</span>(<span class="string">"Accept-Language"</span>,<span class="string">"zh-CN,zh;q=0.8"</span>)
    reqest<span class="preprocessor">.Header</span><span class="preprocessor">.Set</span>(<span class="string">"Cache-Control"</span>,<span class="string">"max-age=0"</span>)
    reqest<span class="preprocessor">.Header</span><span class="preprocessor">.Set</span>(<span class="string">"Connection"</span>,<span class="string">"keep-alive"</span>)
     
    response,_ := client<span class="preprocessor">.Do</span>(reqest)
    if response<span class="preprocessor">.StatusCode</span> == <span class="number">200</span> {
        body, _ := ioutil<span class="preprocessor">.ReadAll</span>(response<span class="preprocessor">.Body</span>)
        bodystr := string(body)<span class="comment">;</span>
        fmt<span class="preprocessor">.Println</span>(bodystr)
    }
}
</pre></td></tr></table></figure>

<p><strong>Client Side</strong>代码来源<a href="http://www.cnblogs.com/yjf512/archive/2012/06/18/2554066.html" target="_blank">网络</a></p>
<h2 id="server-side">Server Side</h2>
<p><code>net.Listen</code></br></p>
<h3 id="http-">http请求</h3>
<p><code>func ListenAndServe(addr string, handler Handler) error</code></br></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>package main

import (
	<span class="string">"io"</span>
	<span class="string">"log"</span>
	<span class="string">"net/http"</span>
)

func helloWorld (w http.ResponseWriter, r *http.Request) {
	io.WriteString (w, <span class="string">"Hello World"</span>)
}

func main () {
	http.HandleFunc (<span class="string">"/hello"</span>, helloWorld)
	err := http.ListenAndServe(<span class="string">":8099"</span>, nil)
	if err != nil {
		log.Fatal(<span class="string">" ListenAndServe: "</span>, err.Error())
	}	
}
</pre></td></tr></table></figure>

<h3 id="https-">https请求</h3>
<p><code>func ListenAndServeTLS(addr string, handler Handler) error</code></br></p>
<h3 id="-">模板缓存</h3>
<p>这个有必要单独出来，是做逻辑与页面分离的。</br>
<code>templates := make(map[string]*template.Template)</code></br></p>
<h3 id="-">动态请求和静态分离</h3>
<p>需要自己写个Handler函数，好烂</p>
<hr>
<blockquote><p><strong>总结</strong></br>
Socket 喜欢！</br>
Http 对于习惯Java 编程的我，不喜欢！</p>
</blockquote>




<h1 id="-">资料</h1>
<ol>
<li><a href="http://jan.newmarch.name/go/" target="_blank">Network programming with Go</a>, really helpful !!!</li>
<li><a href="https://code.google.com/p/go-wiki/wiki/Projects" target="_blank">Go Project</a></li>
</ol>
]]></content>
    <summary type="html"><![CDATA[<p>Go网络编程</p>
]]></summary>
    
      <category term="golang" scheme="http://youfei.github.io/tags/golang/"/>
    
      <category term="Golang" scheme="http://youfei.github.io/categories/Golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Golang语法初读-2]]></title>
    <link href="http://youfei.github.io/2014/02/20/go-g-3/"/>
    <id>http://youfei.github.io/2014/02/20/go-g-3/</id>
    <published>2014-02-20T01:48:42.000Z</published>
    <updated>2014-02-25T05:11:45.000Z</updated>
    <content type="html"><![CDATA[<p><strong>Go</strong> 的 <em>interface{}</em>还是个不错的东东，让人不明觉厉起来。</p>
<a id="more"></a>

<hr>
<h1 id="interface-">interface{}</h1>
<ol>
<li>非侵入式接口</li>
</ol>
<p><code>是否可以理解为实现动作即实现接口...</code></p>
<ol>
<li>接口赋值</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>var rw IReadWriter = <span class="keyword">...</span>
var r IReader = rw
</pre></td></tr></table></figure>

<ol>
<li>接口查询</li>
</ol>
<p>应用场景</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">//拥有IReader接口的开发者，想要知道IReader对应的实例化是否也实现了IReadWriter接口，这样它可以切换到IReadWriterj接口的Writer()方法</span>
<span class="keyword">var</span> reader IReader = NewReader()
<span class="keyword">if</span> writer, ok := reader.(IReadWriter); ok {
	writer.Writer()
}
</pre></td></tr></table></figure>

<ol>
<li>接口组合 <code>个人觉得有点继承的意味</code></li>
</ol>
<p><strong>Go</strong> 的接口定义的很宽泛，有点太宽泛了</br></p>
<hr>
<h1 id="-">并发</h1>
<h3 id="-">并发通信模型</h3>
<ol>
<li>共享数据 <code>以共享为手段的</code></li>
<li>消息传递 <code>订阅/分发，Ajax，Erlang Message Queue</code></li>
</ol>
<blockquote><p><strong>协程(co-rountine)</strong>，在<strong>Go</strong>中叫<strong>go-rountine</strong>，轻量级的线程，由Go运行时管理(Run time)</p>
<p><strong>不要通过共享内存来通信，而应该够过通信来共享内存</strong></p>
</blockquote>


<p><strong>协程</strong>，也有人称之为轻量级线程，特点</p>
<ol>
<li>能够在单一的系统线程中模拟多任务的并发执行</li>
<li>在一个特定的时间内，只有一个任务在执行，即并非真正的并行</li>
<li>被动的任务调度方式，即没有任务主动抢占时间片的说法。</li>
<li>每个协程都有自己的堆栈和局部变量</li>
</ol>
<p><strong>和线程对进程的解释有啥不一样呢？</strong></p>
<h3 id="channel">channel</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="keyword">var</span> channelName <span class="keyword">chan</span> ElementType

ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>)

<span class="comment">//写入数据</span>
ch &lt;- value
<span class="comment">//读出数据</span>
value := &lt;-ch

<span class="comment">//单向channel</span>
<span class="keyword">var</span> ch1 <span class="keyword">chan</span> <span class="typename">int</span>	<span class="comment">//ch1是一个正常的channel，不是单向的</span>
<span class="keyword">var</span> ch2 <span class="keyword">chan</span>&lt;- <span class="typename">float64</span>	<span class="comment">//ch2单向的，只用于写入float64数据</span>
<span class="keyword">var</span> ch3 &lt;-<span class="keyword">chan</span> <span class="typename">int</span>	<span class="comment">//ch3单向的，只用于读取int数据</span>

<span class="comment">//关闭channel</span>
<span class="built_in">close</span>(ch)

<span class="comment">//测试是否关闭成功</span>
x, ok:= &lt;-ch
<span class="keyword">if</span> ok == <span class="constant">false</span> 则表明ch已经被关闭
</pre></td></tr></table></figure>

<h3 id="-">同步</h3>
<ul>
<li><p>同步锁</p>
<ul>
<li>sync.Mutex     强制锁</li>
<li>sync.RWMutex     读写锁</li>
</ul>
</li>
<li><p>全局唯一性操作</p>
<ul>
<li>sync.Once     有点单列模式的意味，用来做init比较好</li>
</ul>
</li>
</ul>
<hr>
<p>敲了书中的代码，越来越觉得<strong>Go</strong>很像<strong>C</strong>语言，普遍的指针使用，channel 还要继续深入看看。</p>
<p><em>struct</em> 结构体代替<em>class</em>到是没什么，就是觉得比起<strong>Java</strong>来说，代码的组织和条理还是有点乱，看来还得适应适应。</p>
<p><strong>Go</strong> 的调试需要<em>gdb.exe</em>,cywin 和 mingw 的都一样，装一个配在<strong>DEBUG</strong>里面就好了。
不过最好是保持32位/64位一致，要不有可能会凌乱掉。</p>
<p><strong>Go Project</strong>中的<strong>Build Path</strong>最好不要动，这个更容易凌乱。</p>
]]></content>
    <summary type="html"><![CDATA[<p><strong>Go</strong> 的 <em>interface{}</em>还是个不错的东东，让人不明觉厉起来。</p>
]]></summary>
    
      <category term="golang" scheme="http://youfei.github.io/tags/golang/"/>
    
      <category term="Golang" scheme="http://youfei.github.io/categories/Golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java多版本清理]]></title>
    <link href="http://youfei.github.io/2014/02/19/java-multi-1/"/>
    <id>http://youfei.github.io/2014/02/19/java-multi-1/</id>
    <published>2014-02-19T08:56:56.000Z</published>
    <updated>2014-02-19T09:11:19.000Z</updated>
    <content type="html"><![CDATA[<p>近期需要对<strong>Java Web Start</strong>的各种版本进行测试，安装到<strong>SDK1.7</strong>以后就会出现各种问题，什么安装不上，什么清理不了等等。
</br>
要恢复原来的开发系统相当苦难。
<a id="more"></a></p>
<p></br>
经过一天的苦苦奋斗，总结下经验：</p>
<ul>
<li>1.用360软件管家卸载各种JDK, JRE <strong>两遍</strong>， 一遍不干净两遍还有点残余</li>
<li>2.在regedit中以<strong>JavaSoft</strong>为关键字搜索，然后进行各种删除</li>
<li>3.整个世界清静了...</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>近期需要对<strong>Java Web Start</strong>的各种版本进行测试，安装到<strong>SDK1.7</strong>以后就会出现各种问题，什么安装不上，什么清理不了等等。
</br>
要恢复原来的开发系统相当苦难。
]]></summary>
    
      <category term="Java" scheme="http://youfei.github.io/tags/Java/"/>
    
      <category term="Java" scheme="http://youfei.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Golang语法初读-1]]></title>
    <link href="http://youfei.github.io/2014/02/18/go-g-2/"/>
    <id>http://youfei.github.io/2014/02/18/go-g-2/</id>
    <published>2014-02-18T02:24:15.000Z</published>
    <updated>2014-02-20T01:50:03.000Z</updated>
    <content type="html"><![CDATA[<p>搭好环境，看看<strong>Go</strong>的语法吧，参考书：<code>GO语言编程</code></p>
<a id="more"></a>

<p>第一天，个人感觉</p>
<ul>
<li><strong>Golang</strong> 应该属于结构化编程</li>
<li>看到作者写到<strong>Golang是更好的C语言</strong> 这个观点到是相当赞同</li>
<li>说实话吸引人的地方有限，defer？ Multiple return values？</li>
</ul>
<hr>
<h1 id="-">变量</h1>
<p>变量描述：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="code"><pre><span class="comment">//int</span>
<span class="keyword">var</span> a <span class="typename">int</span>
a =<span class="number"> 1</span>

b :=<span class="number"> 1</span>

<span class="comment">// string</span>
c, str :=<span class="number"> 1</span>, <span class="string">"string"</span>

<span class="comment">// Array</span>
<span class="keyword">var</span> is <span class="number">[2</span>]<span class="typename">int</span>
is<span class="number">[0</span>] =<span class="number"> 1</span>
is<span class="number">[1</span>] =<span class="number"> 2</span>

a := <span class="number">[2</span>]<span class="number">[2</span>]<span class="typename">int</span>{ <span class="number">{1</span><span class="number">,2</span>}, <span class="number">{3</span><span class="number">,4</span>} }

<span class="keyword">var</span> myArray <span class="number">[10</span>]<span class="typename">int</span> = <span class="number">[10</span>]<span class="typename">int</span><span class="number">{1</span>,<span class="number"> 2</span>,<span class="number"> 3</span>,<span class="number"> 4</span>,<span class="number"> 5</span>,<span class="number"> 6</span>,<span class="number"> 7</span>,<span class="number"> 8</span>,<span class="number"> 9</span>,<span class="number"> 10</span>}

<span class="comment">// 切片</span>
<span class="keyword">var</span> mySlice []<span class="typename">int</span> = myArray[<span class="number">:5</span>]

<span class="keyword">var</span> slice1 = []<span class="typename">int</span><span class="number">{1</span>,<span class="number"> 2</span>,<span class="number"> 3</span>,<span class="number"> 4</span>,<span class="number"> 5</span>}

<span class="comment">// 结构体</span>
<span class="keyword">type</span> PersonInfo <span class="keyword">struct</span> {
	ID <span class="typename">string</span>
	Name <span class="typename">string</span>
	Address <span class="typename">string</span>
}

<span class="comment">// map</span>
<span class="keyword">var</span> personDB <span class="keyword">map</span>[<span class="typename">string</span>] PersonInfo
personDB = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="typename">string</span>] PersonInfo)

personDB[<span class="string">"12345"</span>] = PersonInfo{<span class="string">"12345"</span>, <span class="string">"Tom"</span>, <span class="string">"Room 203"</span>}
personDB[<span class="string">"1"</span>] = PersonInfo{<span class="string">"1"</span>, <span class="string">"Jack"</span>, <span class="string">"Room 103"</span>}

person, ok := personDB[<span class="string">"1234"</span>]
<span class="keyword">if</span> ok {
	fmt.Println(<span class="string">"Found Person "</span>, person.Name, <span class="string">"with ID 1234 ."</span>)
} <span class="keyword">else</span> {
	fmt.Println(<span class="string">"Do not found Person with ID 1234 ."</span>)
}

monthdays := <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">int</span>{
	<span class="string">"Jan"</span><span class="number">:31</span>,<span class="string">"Feb"</span><span class="number">:28</span>,
}<span class="comment">// 最后一个逗号是必须的。</span>
fmt.Println(<span class="string">"---- "</span>, monthdays)
<span class="comment">// ----  map[Jan:31 Feb:28]</span>
</pre></td></tr></table></figure>

<hr>
<h1 id="-">函数</h1>
<p><strong>Golang</strong>中函数的基本组成为：<strong>关键字func，函数名，参数列表，返回值，函数体和返回语句</strong></p>
<p>个人觉得这里得package name就是调用名，即:<strong><package name>.method</strong></p>
<p><strong>Golang</strong>中的泛型 <strong>interface{}</strong>, 先这么理解吧</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="keyword">func</span> MyPrintf(args ...<span class="keyword">interface</span>{}){
	<span class="keyword">for</span> _, arg := <span class="keyword">range</span> args {
		<span class="keyword">switch</span> arg.(<span class="keyword">type</span>) {
			<span class="keyword">case</span> <span class="typename">int</span>:
				fmt.Println(<span class="string">"int value"</span>)
			<span class="keyword">case</span> <span class="typename">string</span>:
				fmt.Println(<span class="string">"string value"</span>)
			<span class="keyword">case</span> <span class="typename">int64</span>:
				fmt.Println(<span class="string">"int64 value"</span>)	
			<span class="keyword">default</span>:
				fmt.Println(<span class="string">"noknown value"</span>)
		}
	}
}
</pre></td></tr></table></figure>


<hr>
<h1 id="-">错误处理</h1>
<ul>
<li><strong>error接口</strong> 还不是太懂</li>
<li><strong>defer</strong> 这个还是比较NB的，省下了好多close</li>
<li><strong>panic &amp; recover</strong> 讲的太少，下来在看吧</li>
</ul>
<hr>
<h1 id="-">小计</h1>
<ul>
<li>在有返回值的函数中，不能在有判断的地方直接<strong>renturn value</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">func</span> example (x <span class="typename">int</span>) <span class="typename">int</span> {
	<span class="keyword">if</span> x=<span class="number">=0</span> {
		<span class="keyword">return</span><span class="number"> 5</span>
	} <span class="keyword">else</span> {
		<span class="keyword">return</span> x
	}
}
</pre></td></tr></table></figure>

<blockquote><p>书上写<em>Will throw: function ends without a return statement</em></p>
<p><strong>但是我运行了下没出错啊... 是否是在说尽信书不如无书，哈哈</strong> </p>
</blockquote>


<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="keyword">package</span> main
<span class="keyword">import</span> <span class="string">"fmt"</span>

<span class="keyword">func</span> example (x <span class="typename">int</span>) <span class="typename">int</span> {
	<span class="keyword">if</span> x=<span class="number">=0</span> {
		<span class="keyword">return</span><span class="number"> 5</span>
	} <span class="keyword">else</span> {
		<span class="keyword">return</span> x
	}
}
<span class="keyword">func</span> main() {
	fmt.Println(<span class="string">"Hello, 世界"</span>, example<span class="number">(4</span>))
	fmt.Println(<span class="string">"Hello, 世界"</span>, example<span class="number">(5</span>))
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>Hello, 世界 4
Hello, 世界 5
</pre></td></tr></table></figure>

<ul>
<li>这样的命名规则
<em>小写字母开头的函数只在本包可见，大写字母开头的函数才可以被其他包可见，该规则同样适用于类型和变量</em><blockquote><p>这个规则让人只想说<strong>shit</strong></p>
</blockquote>

</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>搭好环境，看看<strong>Go</strong>的语法吧，参考书：<code>GO语言编程</code></p>
]]></summary>
    
      <category term="golang" scheme="http://youfei.github.io/tags/golang/"/>
    
      <category term="Golang" scheme="http://youfei.github.io/categories/Golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Golang安装与IDE]]></title>
    <link href="http://youfei.github.io/2014/02/17/go-g-1/"/>
    <id>http://youfei.github.io/2014/02/17/go-g-1/</id>
    <published>2014-02-17T07:01:31.000Z</published>
    <updated>2014-02-17T08:33:16.000Z</updated>
    <content type="html"><![CDATA[<h1 id="go-programming-language">Go Programming Language</h1>
<p><a href="http://docs.studygolang.com/" target="_blank">Go</a> is an open source programming language that makes it easy to build simple, reliable, and efficient software.</p>
<a id="more"></a>

<p>个人而言：Google出品的，应该很NB吧...</p>
<hr>
<h1 id="go-windows-">Go Windows安装</h1>
<p>在<a href="http://docs.studygolang.com/" target="_blank">Go</a> 主页上<strong>Download Go</strong>， 我选择的<em>msi</em>版本，双击安装。</p>
<p>安装完成后，启动<code>cmd</code>,运行<code>go</code>查看安装成果</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>go
<span class="keyword">echo</span> <span class="envvar">%GOROOT%</span>		# C:\go
<span class="keyword">echo</span> <span class="envvar">%PATH%</span>		# <span class="envvar">%GOROOT%</span>\bin;<span class="envvar">%PATH%</span>
</pre></td></tr></table></figure>

<hr>
<h1 id="go-eclipse">Go eclipse</h1>
<p><strong>Eclipse</strong>是个好同志，啥都有插件</br>
<strong>Go</strong>的Eclipse插件<a href="https://code.google.com/p/goclipse/" target="_blank">goclipse</a>，如何安装eclipse的插件俺就不废话了</p>
<h3 id="goclipse-">goclipse配置</h3>
<p>配置如图：
<img src="/img/go-config.PNG" alt="go-config"></p>
<h3 id="go-helloworld">Go Helloworld</h3>
<p>在<strong>Eclipse</strong>创建<code>Go Project</code></br>
在<strong>Go Project</strong>创建<code>Go File</code> 键入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>package main
<span class="function"><span class="title">import</span> <span class="params">(
	<span class="string">"fmt"</span>
)</span>
<span class="title">func</span> <span class="title">main</span><span class="params">()</span> {
	<span class="title">fmt</span>.P<span class="title">rintln</span><span class="params">(<span class="string">"hello world"</span>)</span>
}</span>
</pre></td></tr></table></figure>

<p>右键运行<code>Run Go Application</code></p>
<h3 id="goclipse-">goclipse输入提示</h3>
<ul>
<li>在<strong>Git Hub</strong>上，找到<a href="https://github.com/nsf/gocode" target="_blank">Gocode</a>,下载并放置在<code>$GOHOME</code>目录下并解压，得到<strong>Gocode</strong>路径<code>C:\Go\gocode\gocode-master</code> </br>
在<strong>Gocode</strong>文件夹下，起<code>cmd</code>，键入<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>set GOPATH="C:<span class="command">\Go</span><span class="command">\gocode</span><span class="command">\gocode</span>-master"
go build
</pre></td></tr></table></figure>

</li>
</ul>
<p>在<strong>Gocode</strong>下，会生成<code>gocode-master.exe</code></p>
<ul>
<li><p>配置Gocode到Eclipse
如图：
<img src="/img/gocode-config.PNG" alt="gocode-config"></p>
</li>
<li><p>效果展示
<img src="/img/go-suggest.png" alt="go-suggest"></p>
</li>
</ul>
<hr>
<h1 id="-">其他信息</h1>
<ol>
<li>国人<a href="https://code.google.com/p/golangide/" target="_blank">GolangIDE</a></li>
<li><a href="http://www.360doc.com/content/13/0926/16/8504707_317256198.shtml" target="_blank">GOPATH</a>详解</li>
<li><a href="http://blog.csdn.net/hengyunabc/article/details/7371446" target="_blank">参考文章</a></li>
<li><a href="http://blog.hsatac.net/2012/09/golang-ides/" target="_blank">各种IDE介绍</a></li>
</ol>
]]></content>
    <summary type="html"><![CDATA[<h1 id="go-programming-language">Go Programming Language</h1>
<p><a href="http://docs.studygolang.com/" target="_blank">Go</a> is an open source programming language that makes it easy to build simple, reliable, and efficient software.</p>
]]></summary>
    
      <category term="golang" scheme="http://youfei.github.io/tags/golang/"/>
    
      <category term="Golang" scheme="http://youfei.github.io/categories/Golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo配置]]></title>
    <link href="http://youfei.github.io/2014/02/14/hexo-g-2/"/>
    <id>http://youfei.github.io/2014/02/14/hexo-g-2/</id>
    <published>2014-02-14T14:05:42.000Z</published>
    <updated>2014-02-17T08:27:39.000Z</updated>
    <content type="html"><![CDATA[<p>有兴趣时候再写吧。。。</p>
]]></content>
    
    
      <category term="hexo" scheme="http://youfei.github.io/tags/hexo/"/>
    
      <category term="Github Blog" scheme="http://youfei.github.io/categories/Github%20Blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[建立Github博客]]></title>
    <link href="http://youfei.github.io/2014/02/14/gitpages-g-1/"/>
    <id>http://youfei.github.io/2014/02/14/gitpages-g-1/</id>
    <published>2014-02-14T04:51:51.000Z</published>
    <updated>2014-02-14T07:17:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-github-">建立Github博客</h1>
<p><a href="https://github.com/" target="_blank">Git</a> 作为代码管理仓库已经被广泛接受。</p>
<a id="more"></a>

<p>选择<strong>Github</strong>做博客的理由</p>
<ul>
<li>方便。     #用<em>Git</em> 管理代码，用<em>Git Page</em>发点博客</li>
<li>简单，     #用Markdown编写</li>
<li>速度快，     #体验好</li>
</ul>
<hr>
<h2 id="-github-">注册Github账户</h2>
<p>打开Github主页 <code>https://github.com/</code> 注册&lt;<em>Account</em>&gt;</p>
<hr>
<h2 id="-repository">建立Repository</h2>
<ul>
<li>建立一个Repository，命名为 <code>&lt;Account&gt;.git.io</code></li>
<li>Click <code>Setting</code> Button</li>
<li>在Tab <code>Github Page</code> 中，点击 <code>Atuomatic Page Generator</code>，生成默认页面</li>
</ul>
<p>Ok, 可以在浏览器中查看了<code>http://Account.git.io</code></p>
<p>更多详细可参考<a href="http://beiyuu.com/github-pages/" target="_blank">使用Github Pages建独立博客</a></p>
]]></content>
    <summary type="html"><![CDATA[<h1 id="-github-">建立Github博客</h1>
<p><a href="https://github.com/" target="_blank">Git</a> 作为代码管理仓库已经被广泛接受。</p>
]]></summary>
    
      <category term="Git Page" scheme="http://youfei.github.io/tags/Git%20Page/"/>
    
      <category term="Github Blog" scheme="http://youfei.github.io/categories/Github%20Blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo简介]]></title>
    <link href="http://youfei.github.io/2014/02/13/hexo-g-1/"/>
    <id>http://youfei.github.io/2014/02/13/hexo-g-1/</id>
    <published>2014-02-13T14:02:58.000Z</published>
    <updated>2014-02-13T15:56:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="hexo-">hexo简介</h1>
<hr>
<h2 id="hexo">Hexo</h2>
<p><a href="http://zespia.tw/hexo/" target="_blank">Hexo</a> 是由Node.js编写的静态Blog框架。它主要涉及：<a href="http://nodejs.org/" target="_blank">Node.js</a>, <a href="http://learnboost.github.io/stylus/" target="_blank">stylus</a>, <a href="http://www.zybuluo.com/mdeditor" target="_blank">Markdown</a> 等东东。和作者<a href="https://github.com/tommy351/hexo" target="_blank">@tommy351</a>说的一样，整个框架的应用，主题转换与修改都是非常简单，方便的。
<a id="more"></a>
个人选择 <strong>Hexo</strong> 的理由</p>
<ul>
<li>在Github Page上应用简单</li>
<li>主题自己可以修改, 本博主题 <a href="https://github.com/youfei/pacmanBlue" target="_blank">pacmanBlue</a></li>
<li>Markdown</li>
</ul>
<hr>
<h2 id="hexo-">Hexo搭建</h2>
<h3 id="1-git">1. 安装Git</h3>
<p>Window 下，安装 <a href="http://msysgit.github.io/" target="_blank">msysgit</a></p>
<h3 id="2-node-js">2. 安装Node.js</h3>
<p>安装 <a href="http://nodejs.org/" target="_blank">Node.js</a></p>
<h3 id="3-hexo">3. 安装Hexo</h3>
<p>选择日常编写Blog的文件夹，右键-&gt; <strong>Git Bash</strong> 
运行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="variable">$ </span>npm install -g hexo
<span class="variable">$ </span>hexo init
</pre></td></tr></table></figure>

<blockquote><p>详细信息可参考 <a href="http://zespia.tw/hexo/docs/" target="_blank">Hexo docs</a></p>
</blockquote>


<h3 id="4-hexo-">4. Hexo常用命令</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="variable">$ </span>hexo clean		<span class="comment">#清除</span>
<span class="variable">$ </span>hexo new 			<span class="comment">#新建Blog</span>
<span class="variable">$ </span>hexo generate		<span class="comment">#生成静态Blog页面</span>
<span class="variable">$ </span>hexo server		<span class="comment">#启动本地服务，查看页面状态，默认端口4000</span>
<span class="variable">$ </span>hexo deploy		<span class="comment">#部署Blog</span>
</pre></td></tr></table></figure>

<ul>
<li><strong>本地查看</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="variable">$ </span>hexo generate		<span class="comment">#生成静态Blog页面</span>
<span class="variable">$ </span>hexo server		<span class="comment">#启动本地服务，查看页面状态，默认端口4000</span>
</pre></td></tr></table></figure>

<p>在本地浏览器中输入<code>http://localhost:4000/</code></p>
<ul>
<li><strong>远端部署</strong></li>
</ul>
<p>远端部署需要修改配置文件<code>&lt;Hexo init folder&gt;/_config.yml</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>deploy:
  type: github
  repository: https://github.com/&lt;your git domain&gt;/&lt;your git domain&gt;.github.io.git
  branch: master
</pre></td></tr></table></figure>

<p>之后再运行以下命令进行部署</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$ </span>hexo deploy -g	<span class="comment">#部署Blog</span>
</pre></td></tr></table></figure>

<ul>
<li><strong>Tips</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="variable">$ </span>hexo g	<span class="comment">#hexo generate		#生成静态Blog页面</span>
<span class="variable">$ </span>hexo s 	<span class="comment">#hexo server		#启动本地服务，查看页面状态，默认端口4000</span>
<span class="variable">$ </span>hexo d	<span class="comment">#hexo deploy		#部署Blog</span>
</pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<h1 id="hexo-">hexo简介</h1>
<hr>
<h2 id="hexo">Hexo</h2>
<p><a href="http://zespia.tw/hexo/" target="_blank">Hexo</a> 是由Node.js编写的静态Blog框架。它主要涉及：<a href="http://nodejs.org/" target="_blank">Node.js</a>, <a href="http://learnboost.github.io/stylus/" target="_blank">stylus</a>, <a href="http://www.zybuluo.com/mdeditor" target="_blank">Markdown</a> 等东东。和作者<a href="https://github.com/tommy351/hexo" target="_blank">@tommy351</a>说的一样，整个框架的应用，主题转换与修改都是非常简单，方便的。
]]></summary>
    
      <category term="hexo" scheme="http://youfei.github.io/tags/hexo/"/>
    
      <category term="Github Blog" scheme="http://youfei.github.io/categories/Github%20Blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Import Image]]></title>
    <link href="http://youfei.github.io/2014/02/13/import-image/"/>
    <id>http://youfei.github.io/2014/02/13/import-image/</id>
    <published>2014-02-13T12:29:34.000Z</published>
    <updated>2014-02-13T13:15:22.000Z</updated>
    <content type="html"><![CDATA[<p>This is a image test page.</p>
<p><img src="/img/404.jpg" alt="404page"></p>
<p>This is a music test</p>
<embed src="http://www.xiami.com/widget/0_1771756963/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"></embed>
]]></content>
    
    
      <category term="hexo" scheme="http://youfei.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Code HighLight]]></title>
    <link href="http://youfei.github.io/2014/02/12/code-highlight/"/>
    <id>http://youfei.github.io/2014/02/12/code-highlight/</id>
    <published>2014-02-12T08:59:43.000Z</published>
    <updated>2014-02-13T12:41:43.000Z</updated>
    <content type="html"><![CDATA[<p>Try code high light</p>
<a id="more"></a>

<p>this is [High] [Light] code.</p>
<figure class="highlight [High]"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="attribute">codes

codes

codes

var codes </span>=<span class="string"> sss;</span>
</pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>[title] []</span></figcaption><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>code snippet
</pre></td></tr></table></figure>



<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. </p>
</blockquote>



<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>



<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="function">alert(<span class="string">'Hello World!'</span>)</span>;
</pre></td></tr></table></figure>


<figure class="highlight objc"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">[rectangle setX: 10 y: 10 width: 20 height: 20]</span><span class="comment">;</span>
</pre></td></tr></table></figure>


<figure class="highlight"><figcaption><span>.compact</span><a href="http://underscorejs.org/#compact" target="_blank">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>.compact([<span class="number">0</span>, <span class="number">1</span>, <span class="keyword">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>]);
=&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]
</pre></td></tr></table></figure>


<blockquote class="pullquote [class]"><p>content</p>
</blockquote>




content




<p>photos</p>
<ul>
<li>photo1</li>
<li>photo2</li>
</ul>
<p>Welcome to <a href="http://zespia.tw/hexo" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://zespia.tw/hexo/docs" target="_blank">documentation</a> to learn how to use.</p>
]]></content>
    <summary type="html"><![CDATA[<p>Try code high light</p>
]]></summary>
    
      <category term="hexo" scheme="http://youfei.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://youfei.github.io/2014/02/11/hello-world/"/>
    <id>http://youfei.github.io/2014/02/11/hello-world/</id>
    <published>2014-02-11T03:41:35.000Z</published>
    <updated>2014-02-13T12:41:43.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://zespia.tw/hexo" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://zespia.tw/hexo/docs" target="_blank">documentation</a> to learn how to use.</p>
]]></content>
    
    
      <category term="hexo" scheme="http://youfei.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
