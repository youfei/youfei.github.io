<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[youfei's blog]]></title>
  <subtitle><![CDATA[Good good study]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://youfei.github.io/"/>
  <updated>2014-02-21T01:08:33.945Z</updated>
  <id>http://youfei.github.io/</id>
  
  <author>
    <name><![CDATA[fei you]]></name>
    <email><![CDATA[youfei08@126.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Golang语法初读-2]]></title>
    <link href="http://youfei.github.io/2014/02/20/go-g-3/"/>
    <id>http://youfei.github.io/2014/02/20/go-g-3/</id>
    <published>2014-02-20T01:48:42.000Z</published>
    <updated>2014-02-21T01:08:11.000Z</updated>
    <content type="html"><![CDATA[<p><strong>Go</strong> 的 <em>interface{}</em>还是个不错的东东，让人不明觉厉起来。</p>
<a id="more"></a>

<hr>
<h1 id="interface-">interface{}</h1>
<ol>
<li>非侵入式接口</li>
<li>接口赋值</li>
<li>接口查询</li>
<li>接口组合 <code>个人觉得有点继承的意味</code></li>
</ol>
<p><strong>Go</strong> 的接口定义的很宽泛，有点太宽泛了</p>
<hr>
<h1 id="-">并发</h1>
<h3 id="-">并发通信模型</h3>
<ol>
<li>共享数据 <code>以共享为手段的</code></li>
<li>消息传递 <code>订阅/分发，Ajax，Erlang Message Queue</code></li>
</ol>
<blockquote><p><strong>协程(co-rountine)</strong>，在<strong>Go</strong>中叫<strong>go-rountine</strong>，轻量级的线程，由Go运行时管理(Run time)</p>
<p><strong>不要通过共享内存来通信，而应该够过通信来共享内存</strong></p>
</blockquote>


<h3 id="channel">channel</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="keyword">var</span> channelName <span class="keyword">chan</span> ElementType

ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>)

<span class="comment">//写入数据</span>
ch &lt;- value
<span class="comment">//读出数据</span>
value := &lt;-ch

<span class="comment">//单向channel</span>
<span class="keyword">var</span> ch1 <span class="keyword">chan</span> <span class="typename">int</span>	<span class="comment">//ch1是一个正常的channel，不是单向的</span>
<span class="keyword">var</span> ch2 <span class="keyword">chan</span>&lt;- <span class="typename">float64</span>	<span class="comment">//ch2单向的，只用于写入float64数据</span>
<span class="keyword">var</span> ch3 &lt;-<span class="keyword">chan</span> <span class="typename">int</span>	<span class="comment">//ch3单向的，只用于读取int数据</span>

<span class="comment">//关闭channel</span>
<span class="built_in">close</span>(ch)

<span class="comment">//测试是否关闭成功</span>
x, ok:= &lt;-ch
<span class="keyword">if</span> ok == <span class="constant">false</span> 则表明ch已经被关闭
</pre></td></tr></table></figure>

<h3 id="-">同步</h3>
<ul>
<li><p>同步锁</p>
<ul>
<li>sync.Mutex     强制锁</li>
<li>sync.RWMutex     读写锁</li>
</ul>
</li>
<li><p>全局唯一性操作</p>
<ul>
<li>sync.Once     有点单列模式的意味，用来做init比较好</li>
</ul>
</li>
</ul>
<hr>
<p>敲了书中的代码，越来越觉得<strong>Go</strong>很像<strong>C</strong>语言，普遍的指针使用，channel 还要继续深入看看。</p>
<p><em>struct</em> 结构体代替<em>class</em>到是没什么，就是觉得比起<strong>Java</strong>来说，代码的组织和条理还是有点乱，看来还得适应适应。</p>
<p><strong>Go</strong> 的调试需要<em>gdb.exe</em>,cywin 和 mingw 的都一样，装一个配在<strong>DEBUG</strong>里面就好了。
不过最好是保持32位/64位一致，要不有可能会凌乱掉。</p>
<p><strong>Go Project</strong>中的<strong>Build Path</strong>最好不要动，这个更容易凌乱。</p>
]]></content>
    <summary type="html"><![CDATA[<p><strong>Go</strong> 的 <em>interface{}</em>还是个不错的东东，让人不明觉厉起来。</p>
]]></summary>
    
      <category term="golang" scheme="http://youfei.github.io/tags/golang/"/>
    
      <category term="Golang" scheme="http://youfei.github.io/categories/Golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java多版本清理]]></title>
    <link href="http://youfei.github.io/2014/02/19/java-multi-1/"/>
    <id>http://youfei.github.io/2014/02/19/java-multi-1/</id>
    <published>2014-02-19T08:56:56.000Z</published>
    <updated>2014-02-19T09:11:19.000Z</updated>
    <content type="html"><![CDATA[<p>近期需要对<strong>Java Web Start</strong>的各种版本进行测试，安装到<strong>SDK1.7</strong>以后就会出现各种问题，什么安装不上，什么清理不了等等。
</br>
要恢复原来的开发系统相当苦难。
<a id="more"></a></p>
<p></br>
经过一天的苦苦奋斗，总结下经验：</p>
<ul>
<li>1.用360软件管家卸载各种JDK, JRE <strong>两遍</strong>， 一遍不干净两遍还有点残余</li>
<li>2.在regedit中以<strong>JavaSoft</strong>为关键字搜索，然后进行各种删除</li>
<li>3.整个世界清静了...</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>近期需要对<strong>Java Web Start</strong>的各种版本进行测试，安装到<strong>SDK1.7</strong>以后就会出现各种问题，什么安装不上，什么清理不了等等。
</br>
要恢复原来的开发系统相当苦难。
]]></summary>
    
      <category term="Java" scheme="http://youfei.github.io/tags/Java/"/>
    
      <category term="Java" scheme="http://youfei.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Golang语法初读-1]]></title>
    <link href="http://youfei.github.io/2014/02/18/go-g-2/"/>
    <id>http://youfei.github.io/2014/02/18/go-g-2/</id>
    <published>2014-02-18T02:24:15.000Z</published>
    <updated>2014-02-20T01:50:03.000Z</updated>
    <content type="html"><![CDATA[<p>搭好环境，看看<strong>Go</strong>的语法吧，参考书：<code>GO语言编程</code></p>
<a id="more"></a>

<p>第一天，个人感觉</p>
<ul>
<li><strong>Golang</strong> 应该属于结构化编程</li>
<li>看到作者写到<strong>Golang是更好的C语言</strong> 这个观点到是相当赞同</li>
<li>说实话吸引人的地方有限，defer？ Multiple return values？</li>
</ul>
<hr>
<h1 id="-">变量</h1>
<p>变量描述：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="code"><pre><span class="comment">//int</span>
<span class="keyword">var</span> a <span class="typename">int</span>
a =<span class="number"> 1</span>

b :=<span class="number"> 1</span>

<span class="comment">// string</span>
c, str :=<span class="number"> 1</span>, <span class="string">"string"</span>

<span class="comment">// Array</span>
<span class="keyword">var</span> is <span class="number">[2</span>]<span class="typename">int</span>
is<span class="number">[0</span>] =<span class="number"> 1</span>
is<span class="number">[1</span>] =<span class="number"> 2</span>

a := <span class="number">[2</span>]<span class="number">[2</span>]<span class="typename">int</span>{ <span class="number">{1</span><span class="number">,2</span>}, <span class="number">{3</span><span class="number">,4</span>} }

<span class="keyword">var</span> myArray <span class="number">[10</span>]<span class="typename">int</span> = <span class="number">[10</span>]<span class="typename">int</span><span class="number">{1</span>,<span class="number"> 2</span>,<span class="number"> 3</span>,<span class="number"> 4</span>,<span class="number"> 5</span>,<span class="number"> 6</span>,<span class="number"> 7</span>,<span class="number"> 8</span>,<span class="number"> 9</span>,<span class="number"> 10</span>}

<span class="comment">// 切片</span>
<span class="keyword">var</span> mySlice []<span class="typename">int</span> = myArray[<span class="number">:5</span>]

<span class="keyword">var</span> slice1 = []<span class="typename">int</span><span class="number">{1</span>,<span class="number"> 2</span>,<span class="number"> 3</span>,<span class="number"> 4</span>,<span class="number"> 5</span>}

<span class="comment">// 结构体</span>
<span class="keyword">type</span> PersonInfo <span class="keyword">struct</span> {
	ID <span class="typename">string</span>
	Name <span class="typename">string</span>
	Address <span class="typename">string</span>
}

<span class="comment">// map</span>
<span class="keyword">var</span> personDB <span class="keyword">map</span>[<span class="typename">string</span>] PersonInfo
personDB = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="typename">string</span>] PersonInfo)

personDB[<span class="string">"12345"</span>] = PersonInfo{<span class="string">"12345"</span>, <span class="string">"Tom"</span>, <span class="string">"Room 203"</span>}
personDB[<span class="string">"1"</span>] = PersonInfo{<span class="string">"1"</span>, <span class="string">"Jack"</span>, <span class="string">"Room 103"</span>}

person, ok := personDB[<span class="string">"1234"</span>]
<span class="keyword">if</span> ok {
	fmt.Println(<span class="string">"Found Person "</span>, person.Name, <span class="string">"with ID 1234 ."</span>)
} <span class="keyword">else</span> {
	fmt.Println(<span class="string">"Do not found Person with ID 1234 ."</span>)
}

monthdays := <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">int</span>{
	<span class="string">"Jan"</span><span class="number">:31</span>,<span class="string">"Feb"</span><span class="number">:28</span>,
}<span class="comment">// 最后一个逗号是必须的。</span>
fmt.Println(<span class="string">"---- "</span>, monthdays)
<span class="comment">// ----  map[Jan:31 Feb:28]</span>
</pre></td></tr></table></figure>

<hr>
<h1 id="-">函数</h1>
<p><strong>Golang</strong>中函数的基本组成为：<strong>关键字func，函数名，参数列表，返回值，函数体和返回语句</strong></p>
<p>个人觉得这里得package name就是调用名，即:<strong><package name>.method</strong></p>
<p><strong>Golang</strong>中的泛型 <strong>interface{}</strong>, 先这么理解吧</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="keyword">func</span> MyPrintf(args ...<span class="keyword">interface</span>{}){
	<span class="keyword">for</span> _, arg := <span class="keyword">range</span> args {
		<span class="keyword">switch</span> arg.(<span class="keyword">type</span>) {
			<span class="keyword">case</span> <span class="typename">int</span>:
				fmt.Println(<span class="string">"int value"</span>)
			<span class="keyword">case</span> <span class="typename">string</span>:
				fmt.Println(<span class="string">"string value"</span>)
			<span class="keyword">case</span> <span class="typename">int64</span>:
				fmt.Println(<span class="string">"int64 value"</span>)	
			<span class="keyword">default</span>:
				fmt.Println(<span class="string">"noknown value"</span>)
		}
	}
}
</pre></td></tr></table></figure>


<hr>
<h1 id="-">错误处理</h1>
<ul>
<li><strong>error接口</strong> 还不是太懂</li>
<li><strong>defer</strong> 这个还是比较NB的，省下了好多close</li>
<li><strong>panic &amp; recover</strong> 讲的太少，下来在看吧</li>
</ul>
<hr>
<h1 id="-">小计</h1>
<ul>
<li>在有返回值的函数中，不能在有判断的地方直接<strong>renturn value</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">func</span> example (x <span class="typename">int</span>) <span class="typename">int</span> {
	<span class="keyword">if</span> x=<span class="number">=0</span> {
		<span class="keyword">return</span><span class="number"> 5</span>
	} <span class="keyword">else</span> {
		<span class="keyword">return</span> x
	}
}
</pre></td></tr></table></figure>

<blockquote><p>书上写<em>Will throw: function ends without a return statement</em></p>
<p><strong>但是我运行了下没出错啊... 是否是在说尽信书不如无书，哈哈</strong> </p>
</blockquote>


<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="keyword">package</span> main
<span class="keyword">import</span> <span class="string">"fmt"</span>

<span class="keyword">func</span> example (x <span class="typename">int</span>) <span class="typename">int</span> {
	<span class="keyword">if</span> x=<span class="number">=0</span> {
		<span class="keyword">return</span><span class="number"> 5</span>
	} <span class="keyword">else</span> {
		<span class="keyword">return</span> x
	}
}
<span class="keyword">func</span> main() {
	fmt.Println(<span class="string">"Hello, 世界"</span>, example<span class="number">(4</span>))
	fmt.Println(<span class="string">"Hello, 世界"</span>, example<span class="number">(5</span>))
}
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>Hello, 世界 4
Hello, 世界 5
</pre></td></tr></table></figure>

<ul>
<li>这样的命名规则
<em>小写字母开头的函数只在本包可见，大写字母开头的函数才可以被其他包可见，该规则同样适用于类型和变量</em><blockquote><p>这个规则让人只想说<strong>shit</strong></p>
</blockquote>

</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>搭好环境，看看<strong>Go</strong>的语法吧，参考书：<code>GO语言编程</code></p>
]]></summary>
    
      <category term="golang" scheme="http://youfei.github.io/tags/golang/"/>
    
      <category term="Golang" scheme="http://youfei.github.io/categories/Golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Golang安装与IDE]]></title>
    <link href="http://youfei.github.io/2014/02/17/go-g-1/"/>
    <id>http://youfei.github.io/2014/02/17/go-g-1/</id>
    <published>2014-02-17T07:01:31.000Z</published>
    <updated>2014-02-17T08:33:16.000Z</updated>
    <content type="html"><![CDATA[<h1 id="go-programming-language">Go Programming Language</h1>
<p><a href="http://docs.studygolang.com/" target="_blank">Go</a> is an open source programming language that makes it easy to build simple, reliable, and efficient software.</p>
<a id="more"></a>

<p>个人而言：Google出品的，应该很NB吧...</p>
<hr>
<h1 id="go-windows-">Go Windows安装</h1>
<p>在<a href="http://docs.studygolang.com/" target="_blank">Go</a> 主页上<strong>Download Go</strong>， 我选择的<em>msi</em>版本，双击安装。</p>
<p>安装完成后，启动<code>cmd</code>,运行<code>go</code>查看安装成果</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>go
<span class="keyword">echo</span> <span class="envvar">%GOROOT%</span>		# C:\go
<span class="keyword">echo</span> <span class="envvar">%PATH%</span>		# <span class="envvar">%GOROOT%</span>\bin;<span class="envvar">%PATH%</span>
</pre></td></tr></table></figure>

<hr>
<h1 id="go-eclipse">Go eclipse</h1>
<p><strong>Eclipse</strong>是个好同志，啥都有插件</br>
<strong>Go</strong>的Eclipse插件<a href="https://code.google.com/p/goclipse/" target="_blank">goclipse</a>，如何安装eclipse的插件俺就不废话了</p>
<h3 id="goclipse-">goclipse配置</h3>
<p>配置如图：
<img src="/img/go-config.PNG" alt="go-config"></p>
<h3 id="go-helloworld">Go Helloworld</h3>
<p>在<strong>Eclipse</strong>创建<code>Go Project</code></br>
在<strong>Go Project</strong>创建<code>Go File</code> 键入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>package main
<span class="function"><span class="title">import</span> <span class="params">(
	<span class="string">"fmt"</span>
)</span>
<span class="title">func</span> <span class="title">main</span><span class="params">()</span> {
	<span class="title">fmt</span>.P<span class="title">rintln</span><span class="params">(<span class="string">"hello world"</span>)</span>
}</span>
</pre></td></tr></table></figure>

<p>右键运行<code>Run Go Application</code></p>
<h3 id="goclipse-">goclipse输入提示</h3>
<ul>
<li>在<strong>Git Hub</strong>上，找到<a href="https://github.com/nsf/gocode" target="_blank">Gocode</a>,下载并放置在<code>$GOHOME</code>目录下并解压，得到<strong>Gocode</strong>路径<code>C:\Go\gocode\gocode-master</code> </br>
在<strong>Gocode</strong>文件夹下，起<code>cmd</code>，键入<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>set GOPATH="C:<span class="command">\Go</span><span class="command">\gocode</span><span class="command">\gocode</span>-master"
go build
</pre></td></tr></table></figure>

</li>
</ul>
<p>在<strong>Gocode</strong>下，会生成<code>gocode-master.exe</code></p>
<ul>
<li><p>配置Gocode到Eclipse
如图：
<img src="/img/gocode-config.PNG" alt="gocode-config"></p>
</li>
<li><p>效果展示
<img src="/img/go-suggest.png" alt="go-suggest"></p>
</li>
</ul>
<hr>
<h1 id="-">其他信息</h1>
<ol>
<li>国人<a href="https://code.google.com/p/golangide/" target="_blank">GolangIDE</a></li>
<li><a href="http://www.360doc.com/content/13/0926/16/8504707_317256198.shtml" target="_blank">GOPATH</a>详解</li>
<li><a href="http://blog.csdn.net/hengyunabc/article/details/7371446" target="_blank">参考文章</a></li>
<li><a href="http://blog.hsatac.net/2012/09/golang-ides/" target="_blank">各种IDE介绍</a></li>
</ol>
]]></content>
    <summary type="html"><![CDATA[<h1 id="go-programming-language">Go Programming Language</h1>
<p><a href="http://docs.studygolang.com/" target="_blank">Go</a> is an open source programming language that makes it easy to build simple, reliable, and efficient software.</p>
]]></summary>
    
      <category term="golang" scheme="http://youfei.github.io/tags/golang/"/>
    
      <category term="Golang" scheme="http://youfei.github.io/categories/Golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo配置]]></title>
    <link href="http://youfei.github.io/2014/02/14/hexo-g-2/"/>
    <id>http://youfei.github.io/2014/02/14/hexo-g-2/</id>
    <published>2014-02-14T14:05:42.000Z</published>
    <updated>2014-02-17T08:27:39.000Z</updated>
    <content type="html"><![CDATA[<p>有兴趣时候再写吧。。。</p>
]]></content>
    
    
      <category term="hexo" scheme="http://youfei.github.io/tags/hexo/"/>
    
      <category term="Github Blog" scheme="http://youfei.github.io/categories/Github%20Blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[建立Github博客]]></title>
    <link href="http://youfei.github.io/2014/02/14/gitpages-g-1/"/>
    <id>http://youfei.github.io/2014/02/14/gitpages-g-1/</id>
    <published>2014-02-14T04:51:51.000Z</published>
    <updated>2014-02-14T07:17:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-github-">建立Github博客</h1>
<p><a href="https://github.com/" target="_blank">Git</a> 作为代码管理仓库已经被广泛接受。</p>
<a id="more"></a>

<p>选择<strong>Github</strong>做博客的理由</p>
<ul>
<li>方便。     #用<em>Git</em> 管理代码，用<em>Git Page</em>发点博客</li>
<li>简单，     #用Markdown编写</li>
<li>速度快，     #体验好</li>
</ul>
<hr>
<h2 id="-github-">注册Github账户</h2>
<p>打开Github主页 <code>https://github.com/</code> 注册&lt;<em>Account</em>&gt;</p>
<hr>
<h2 id="-repository">建立Repository</h2>
<ul>
<li>建立一个Repository，命名为 <code>&lt;Account&gt;.git.io</code></li>
<li>Click <code>Setting</code> Button</li>
<li>在Tab <code>Github Page</code> 中，点击 <code>Atuomatic Page Generator</code>，生成默认页面</li>
</ul>
<p>Ok, 可以在浏览器中查看了<code>http://Account.git.io</code></p>
<p>更多详细可参考<a href="http://beiyuu.com/github-pages/" target="_blank">使用Github Pages建独立博客</a></p>
]]></content>
    <summary type="html"><![CDATA[<h1 id="-github-">建立Github博客</h1>
<p><a href="https://github.com/" target="_blank">Git</a> 作为代码管理仓库已经被广泛接受。</p>
]]></summary>
    
      <category term="Git Page" scheme="http://youfei.github.io/tags/Git%20Page/"/>
    
      <category term="Github Blog" scheme="http://youfei.github.io/categories/Github%20Blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo简介]]></title>
    <link href="http://youfei.github.io/2014/02/13/hexo-g-1/"/>
    <id>http://youfei.github.io/2014/02/13/hexo-g-1/</id>
    <published>2014-02-13T14:02:58.000Z</published>
    <updated>2014-02-13T15:56:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="hexo-">hexo简介</h1>
<hr>
<h2 id="hexo">Hexo</h2>
<p><a href="http://zespia.tw/hexo/" target="_blank">Hexo</a> 是由Node.js编写的静态Blog框架。它主要涉及：<a href="http://nodejs.org/" target="_blank">Node.js</a>, <a href="http://learnboost.github.io/stylus/" target="_blank">stylus</a>, <a href="http://www.zybuluo.com/mdeditor" target="_blank">Markdown</a> 等东东。和作者<a href="https://github.com/tommy351/hexo" target="_blank">@tommy351</a>说的一样，整个框架的应用，主题转换与修改都是非常简单，方便的。
<a id="more"></a>
个人选择 <strong>Hexo</strong> 的理由</p>
<ul>
<li>在Github Page上应用简单</li>
<li>主题自己可以修改, 本博主题 <a href="https://github.com/youfei/pacmanBlue" target="_blank">pacmanBlue</a></li>
<li>Markdown</li>
</ul>
<hr>
<h2 id="hexo-">Hexo搭建</h2>
<h3 id="1-git">1. 安装Git</h3>
<p>Window 下，安装 <a href="http://msysgit.github.io/" target="_blank">msysgit</a></p>
<h3 id="2-node-js">2. 安装Node.js</h3>
<p>安装 <a href="http://nodejs.org/" target="_blank">Node.js</a></p>
<h3 id="3-hexo">3. 安装Hexo</h3>
<p>选择日常编写Blog的文件夹，右键-&gt; <strong>Git Bash</strong> 
运行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="variable">$ </span>npm install -g hexo
<span class="variable">$ </span>hexo init
</pre></td></tr></table></figure>

<blockquote><p>详细信息可参考 <a href="http://zespia.tw/hexo/docs/" target="_blank">Hexo docs</a></p>
</blockquote>


<h3 id="4-hexo-">4. Hexo常用命令</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="variable">$ </span>hexo clean		<span class="comment">#清除</span>
<span class="variable">$ </span>hexo new 			<span class="comment">#新建Blog</span>
<span class="variable">$ </span>hexo generate		<span class="comment">#生成静态Blog页面</span>
<span class="variable">$ </span>hexo server		<span class="comment">#启动本地服务，查看页面状态，默认端口4000</span>
<span class="variable">$ </span>hexo deploy		<span class="comment">#部署Blog</span>
</pre></td></tr></table></figure>

<ul>
<li><strong>本地查看</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="variable">$ </span>hexo generate		<span class="comment">#生成静态Blog页面</span>
<span class="variable">$ </span>hexo server		<span class="comment">#启动本地服务，查看页面状态，默认端口4000</span>
</pre></td></tr></table></figure>

<p>在本地浏览器中输入<code>http://localhost:4000/</code></p>
<ul>
<li><strong>远端部署</strong></li>
</ul>
<p>远端部署需要修改配置文件<code>&lt;Hexo init folder&gt;/_config.yml</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>deploy:
  type: github
  repository: https://github.com/&lt;your git domain&gt;/&lt;your git domain&gt;.github.io.git
  branch: master
</pre></td></tr></table></figure>

<p>之后再运行以下命令进行部署</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$ </span>hexo deploy -g	<span class="comment">#部署Blog</span>
</pre></td></tr></table></figure>

<ul>
<li><strong>Tips</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="variable">$ </span>hexo g	<span class="comment">#hexo generate		#生成静态Blog页面</span>
<span class="variable">$ </span>hexo s 	<span class="comment">#hexo server		#启动本地服务，查看页面状态，默认端口4000</span>
<span class="variable">$ </span>hexo d	<span class="comment">#hexo deploy		#部署Blog</span>
</pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<h1 id="hexo-">hexo简介</h1>
<hr>
<h2 id="hexo">Hexo</h2>
<p><a href="http://zespia.tw/hexo/" target="_blank">Hexo</a> 是由Node.js编写的静态Blog框架。它主要涉及：<a href="http://nodejs.org/" target="_blank">Node.js</a>, <a href="http://learnboost.github.io/stylus/" target="_blank">stylus</a>, <a href="http://www.zybuluo.com/mdeditor" target="_blank">Markdown</a> 等东东。和作者<a href="https://github.com/tommy351/hexo" target="_blank">@tommy351</a>说的一样，整个框架的应用，主题转换与修改都是非常简单，方便的。
]]></summary>
    
      <category term="hexo" scheme="http://youfei.github.io/tags/hexo/"/>
    
      <category term="Github Blog" scheme="http://youfei.github.io/categories/Github%20Blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Import Image]]></title>
    <link href="http://youfei.github.io/2014/02/13/import-image/"/>
    <id>http://youfei.github.io/2014/02/13/import-image/</id>
    <published>2014-02-13T12:29:34.000Z</published>
    <updated>2014-02-13T13:15:22.000Z</updated>
    <content type="html"><![CDATA[<p>This is a image test page.</p>
<p><img src="/img/404.jpg" alt="404page"></p>
<p>This is a music test</p>
<embed src="http://www.xiami.com/widget/0_1771756963/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"></embed>
]]></content>
    
    
      <category term="hexo" scheme="http://youfei.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Code HighLight]]></title>
    <link href="http://youfei.github.io/2014/02/12/code-highlight/"/>
    <id>http://youfei.github.io/2014/02/12/code-highlight/</id>
    <published>2014-02-12T08:59:43.000Z</published>
    <updated>2014-02-13T12:41:43.000Z</updated>
    <content type="html"><![CDATA[<p>Try code high light</p>
<a id="more"></a>

<p>this is [High] [Light] code.</p>
<figure class="highlight [High]"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="attribute">codes

codes

codes

var codes </span>=<span class="string"> sss;</span>
</pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>[title] []</span></figcaption><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>code snippet
</pre></td></tr></table></figure>



<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. </p>
</blockquote>



<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>



<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="function">alert(<span class="string">'Hello World!'</span>)</span>;
</pre></td></tr></table></figure>


<figure class="highlight objc"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">[rectangle setX: 10 y: 10 width: 20 height: 20]</span><span class="comment">;</span>
</pre></td></tr></table></figure>


<figure class="highlight"><figcaption><span>.compact</span><a href="http://underscorejs.org/#compact" target="_blank">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>.compact([<span class="number">0</span>, <span class="number">1</span>, <span class="keyword">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>]);
=&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]
</pre></td></tr></table></figure>


<blockquote class="pullquote [class]"><p>content</p>
</blockquote>




content




<p>photos</p>
<ul>
<li>photo1</li>
<li>photo2</li>
</ul>
<p>Welcome to <a href="http://zespia.tw/hexo" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://zespia.tw/hexo/docs" target="_blank">documentation</a> to learn how to use.</p>
]]></content>
    <summary type="html"><![CDATA[<p>Try code high light</p>
]]></summary>
    
      <category term="hexo" scheme="http://youfei.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://youfei.github.io/2014/02/11/hello-world/"/>
    <id>http://youfei.github.io/2014/02/11/hello-world/</id>
    <published>2014-02-11T03:41:35.000Z</published>
    <updated>2014-02-13T12:41:43.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://zespia.tw/hexo" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://zespia.tw/hexo/docs" target="_blank">documentation</a> to learn how to use.</p>
]]></content>
    
    
      <category term="hexo" scheme="http://youfei.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
